package br.com.devnagui.project.entities;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.apache.log4j.Logger;

import br.com.devnagui.project.enums.SituacaoFiscal;

@Entity
@Table(name = "FISCAL",schema="PROJECT")
@NamedQueries(value = {
		@NamedQuery(name = Fiscal.QUERY_BUSCAR_TODOS_FISCAIS_HABILITADOS_FETCH_HISTORICOS, query = "select f from Fiscal f JOIN FETCH f.historicoHabilitacaoFiscal where f.situacaoFiscal = :situacaoFiscal"),
		@NamedQuery(name = Fiscal.QUERY_BUSCAR_FISCAL_POR_MATRICULA_USUARIO_FETCH_HISTORICOS, query = "select f from Fiscal f JOIN FETCH f.historicoHabilitacaoFiscal where f.usuario.matricula = :matriculaUsuario"),
		@NamedQuery(name = Fiscal.QUERY_LISTAR_FISCAIS_HABILITADOS, query = "select f from Fiscal f JOIN FETCH f.historicoHabilitacaoFiscal where f.situacaoFiscal = :situacaoFiscal"),
		@NamedQuery(name = Fiscal.QUERY_BUSCAR_FISCAIS_POR_NOME_OU_MATRICULA, query = "select f from Fiscal f where f.usuario.matricula like (:param) or f.usuario.nome like (:param) and f.usuario.matricula is not null ")
})
public class Fiscal implements Serializable {

	/**
	 * Serial UID
	 */
	private static final long serialVersionUID = 6330172446564467551L;

	public static final String QUERY_BUSCAR_TODOS_FISCAIS_HABILITADOS_FETCH_HISTORICOS = "buscarTodosFiscaisHabilitadosFetchHistoricos";
	public static final String QUERY_BUSCAR_FISCAL_POR_MATRICULA_USUARIO_FETCH_HISTORICOS = "buscarFiscalPorMatriculaUsuarioFetchHistoricos";
	public static final String SITUACAO_FISCAL_ATTRIBUTE = "situacaoFiscal";
	public static final String QUERY_LISTAR_FISCAIS_HABILITADOS = "listarFiscaisHabilitados";
	public static final String QUERY_BUSCAR_FISCAIS_POR_NOME_OU_MATRICULA = "buscarFiscaisPorNomeOuMatricula";
	private static final Logger LOG = Logger.getLogger(Fiscal.class);

	@Id
	@Column(name = "SEQ_FISCAL")
	@GeneratedValue(generator = "SQ_FISCAL", strategy = GenerationType.SEQUENCE)
	@SequenceGenerator(name = "SQ_FISCAL", sequenceName = "SQ_FISCAL", allocationSize = 1, initialValue = 1)
	private Long id;

	@OneToOne()
	@JoinColumn(name = "SEQ_USUARIO", unique=true)
	@NotNull
	private Usuario usuario;

	@Column(name = "STA_FISCAL", precision = 1, scale = 0)
	@Enumerated(value = EnumType.ORDINAL)
	@NotNull
	private SituacaoFiscal situacaoFiscal;

	@OneToMany(mappedBy = "fiscal", cascade = { CascadeType.DETACH,
			CascadeType.REFRESH, CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.EAGER)
	private List<HistoricoHabilitaFiscal> historicoHabilitacaoFiscal;

	public void adicionarHistoricoHabilitaFiscal(HistoricoHabilitaFiscal historicoHabilitaFiscal) {
		this.historicoHabilitacaoFiscal.add(historicoHabilitaFiscal);
	}

	@Override
	public boolean equals(Object other) {
		if (this == other) {
			return true;
		}
		if (!(other instanceof Fiscal)) {
			return false;
		}
		Fiscal castOther = (Fiscal) other;
		return (this.id == castOther.getId())
				&& (this.usuario.equals(castOther.getUsuario()));
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int hash = 17;
		hash = (int) (hash * prime + this.id);
		hash = hash * prime + this.usuario.hashCode();

		return hash;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Usuario getUsuario() {
		return usuario;
	}

	public void setUsuario(Usuario usuario) {
		this.usuario = usuario;
	}

	public SituacaoFiscal getSituacaoFiscal() {
		return situacaoFiscal;
	}

	public void setSituacaoFiscal(SituacaoFiscal situacaoFiscal) {
		this.situacaoFiscal = situacaoFiscal;
	}

	public List<HistoricoHabilitaFiscal> getHistoricoHabilitacaoFiscal() {
		return historicoHabilitacaoFiscal;
	}

	public void setHistoricoHabilitacaoFiscal(List<HistoricoHabilitaFiscal> historicoHabilitacaoFiscal) {
		this.historicoHabilitacaoFiscal = historicoHabilitacaoFiscal;
	}
	
	/**
	 * BUSCAR DATA DE HABILITAÇÃO MAIS ATUAL DO FISCAL
	 * 
	 * @return data_habilitacao_atual
	 */
	public Date getDataHabilitacaoAtual() {
		Date dataHabilitacao = null;
		try {
			for (HistoricoHabilitaFiscal historicoHabilitaFiscal : historicoHabilitacaoFiscal) {
				if (dataHabilitacao == null) {
					dataHabilitacao = historicoHabilitaFiscal.getDataHabilitacao();
				}
				// Verificar se a data de habilitação é menor, caso for substituí-la pela maior 
				if (dataHabilitacao.before(historicoHabilitaFiscal.getDataHabilitacao())) {
					dataHabilitacao = historicoHabilitaFiscal.getDataHabilitacao();
				}
			}
		} catch (Exception e) {
			LOG.error(e);
		}
		return dataHabilitacao;
	}

	@Override
	public String toString() {
		return "Fiscal [id=" + id + ", usuario=" + usuario
				+ ", situacaoFiscal=" + situacaoFiscal
				+ ", historicoHabilitacaoFiscal=" + historicoHabilitacaoFiscal
				+ "]";
	}
	
	
}