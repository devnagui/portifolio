package br.com.devnagui.project.manager.impl;

import java.util.Date;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.log4j.Logger;

import br.com.devnagui.project.dto.PageObjectDTO;
import br.com.devnagui.project.entities.PostoCombustivel;
import br.com.devnagui.project.entities.Rota;
import br.com.devnagui.project.entities.RotaVersao;
import br.com.devnagui.project.enums.StatusRotaVersao;
import br.com.devnagui.project.manager.RotaManager;
import br.com.devnagui.project.manager.RotaVersaoManager;
import br.com.devnagui.project.manager.exception.BusinessException;

@Stateless
public class RotaVersaoManagerBean extends GenericManagerBean<RotaVersao> implements RotaVersaoManager {

	/**
	 * Serial UID.
	 */
	private static final long serialVersionUID = -6493579600927150528L;
	
	private static final Logger LOG = Logger.getLogger(RotaVersaoManager.class);

	@EJB private RotaManager rotaManager;

	/**
	 * M�todo que pode alterar uma rota, caso ela n�o tenha nenhuma rota vers�o
	 * ativa ou desativada. Caso voc� tenha alguma rota vers�o em edi��o s� ser�
	 * alterado, mas caso voc� tenha uma ativa ser� criado uma nova rota vers�o.
	 * 
	 * @param rotaVersao
	 * @param rota
	 * @return RotaVersao
	 * @throws BusinessException
	 */
	@Override
	public RotaVersao alterarRotaOuInserirRotaVersao(RotaVersao rotaVersao, Rota rota) throws BusinessException {
		// L�gica inversa, pois se n�o tiver alguma vers�o ativa ou desativada vai ser true.
		if(temVersaoAtivaOuDesativada(rota.getId()) && rotaVersao.getStatus() != 2) {
			// Preciso setar pata NULL, pois eu vou inserir outro dado no banco.
			rotaVersao.setId(null);
			// Default � o 2 - Em Edi��o, pois tem que ficar em edi��o.
			rotaVersao.setStatus(StatusRotaVersao.EM_EDICAO.getCodigoSituacao());
			rotaManager.validarCamposAlterar(rota);
			this.validarCampos(rotaVersao);
		} else if(temVersaoAtivaOuDesativada(rota.getId()) && rotaVersao.getStatus() == 2) { 
			rotaManager.validarCamposAlterar(rota);
			this.validarCampos(rotaVersao);
		} else {
			if(rotaVersao.getRota().getNumero() == rotaManager.searchForId(rotaVersao.getRota().getId()).getNumero()) {
				rotaManager.validarCamposAlterar(rota);
				this.validarCampos(rotaVersao);
			} 
		}
		
		// Eu estou garantindo que este campo que ser� nulo.
		rotaVersao.setDataDesativacao(null);
		rotaVersao.setRota(rota);
		return super.update(rotaVersao);
	}
	
	/**
	 * M�todo que ativa um rota vers�o em edi��o.
	 * 
	 * @param rotaVersao
	 * @throws BusinessException
	 */
	@Override
	public void ativar(RotaVersao rotaVersaoEmEdicao, RotaVersao rotaVersaoAtiva) throws BusinessException {
		if(rotaVersaoAtiva != null) {
			rotaVersaoEmEdicao.setStatus(StatusRotaVersao.ATIVA.getCodigoSituacao());
			rotaVersaoAtiva.setStatus(StatusRotaVersao.DESATIVADA.getCodigoSituacao());
			rotaVersaoAtiva.setDataDesativacao(new Date());
			this.update(rotaVersaoAtiva);
			this.update(rotaVersaoEmEdicao);
		} else {
			rotaVersaoEmEdicao.setStatus(StatusRotaVersao.ATIVA.getCodigoSituacao());
			this.update(rotaVersaoEmEdicao);
		}
	}

	/**
	 * M�todo que faz o desfazer a rota vers�o, tira do estado ativo a que est� 
	 * tranzendo para em edi��o e a �ltima que foi desativada traz para ativo.
	 * 
	 * @param rotaVersao
	 * @throws BusinessException
	 */
	@Override
	public void desfazer(RotaVersao rotaVersaoDesativada, RotaVersao rotaVersaoAtiva) throws BusinessException {
		if(rotaVersaoDesativada != null) {
			rotaVersaoDesativada.setStatus(StatusRotaVersao.ATIVA.getCodigoSituacao());
			rotaVersaoDesativada.setDataDesativacao(null);
			this.update(rotaVersaoDesativada);
		}
		rotaVersaoAtiva.setStatus(StatusRotaVersao.EM_EDICAO.getCodigoSituacao());
		this.update(rotaVersaoAtiva);
	}

	/**
	 * M�todo que desativa todas as rotas vers�es tanto a rota vers�o ativa quanto
	 * a rota vers�o em edi��o.
	 * 
	 * @param rotaVersao
	 * @throws BusinessException
	 */
	@Override
	public void desativar(Rota rota) throws BusinessException {
		List<RotaVersao> rotaVersoes = this.buscaVersaoAtivaEEmEdicao(rota.getId());
		
		for (RotaVersao rotaVersao : rotaVersoes) {
			rotaVersao.setStatus(StatusRotaVersao.DESATIVADA.getCodigoSituacao());
			this.update(rotaVersao);
		}
	}

	/**
	 * M�todo que busca pelo menos uma vers�o da rota ativa ou desativada, caso
	 * tenha o usu�rio n�o pode mudar nem o n�mero e nome da rota.
	 * 
	 */
	@Override
	public Boolean temVersaoAtivaOuDesativada(Long idRota) {
		LOG.info("Obtendo rota vers�o ativa ou desativada");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSAO_ATIVA_OU_DESATIVADA, RotaVersao.class);
		query.setParameter("idRota", idRota);

		if (!query.getResultList().isEmpty())
			return true;
		else
			return false;
	}

	/**
	 * M�todo que busca uma rota vers�o ativa ou em endi��o, pelo id passado
	 * para a tela de Alterar ROTA. De acordo com a regra de neg�cio, pois se eu
	 * tiver uma vers�o ativa voc� ultiliza ela como base para criar uma em
	 * edi��o, mas por�m se voc� tiver uma ativa e uma ativa voc� pega como base
	 * a em edi��o, assim voc� n�o ira usar ativa como base e sem a em edi��o. 
	 * 1 = Ativo. 2 = Em Edi��o.
	 * 
	 * @param idRota
	 * @return RotaVersao
	 */
	@Override
	public RotaVersao buscaVersaoAtivaOuEmEdicao(Long idRota) {
		LOG.info("Obtendo rota vers�o ativa ou em edi��o");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSAO_ATIVA_OU_EM_EDICAO, RotaVersao.class);
		query.setParameter("idRota", idRota);

		// Sempre ir� sempre pegar o 1�, pois se tiver 1 ativa vai ser essa e se
		// tiver uma em edi��o vai ser essa e se tiver tiver tanto ativa e eem edi��o
		// vai ser a em edi��o pois a consulta est� DESC.
		return query.getResultList().get(0);
	}

	/**
	 * M�todo que busca todas as rotas vers�o ativas e em edi��o daquela rota.
	 * 
	 * @param idRota
	 * @return RotaVersao
	 */
	@Override
	public List<RotaVersao> buscaVersaoAtivaEEmEdicao(Long idRota) {
		LOG.info("Obtendo rota vers�o ativa ou em edi��o");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSAO_ATIVA_E_EM_EDICAO, RotaVersao.class);
		query.setParameter("idRota", idRota);

		if (!query.getResultList().isEmpty())
			return query.getResultList();
		else
			return null;
	}

	/**
	 * M�todo que lista todas as rotas vers�o ativas do sistema.
	 * 
	 * @return RotaVersao
	 */
	@Override
	public List<RotaVersao> listaVersaoAtiva() {
		LOG.info("Obtendo as rotas vers�es ativas");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_LISTAR_VERSOES_ATIVAS, RotaVersao.class);

		if (!query.getResultList().isEmpty())
			return query.getResultList();
		else
			return null;
	}
	
	/**
	 * M�todo que busca todas rotas vers�es ativas daquela rota.
	 * 
	 */
	@Override
	public RotaVersao buscaVersaoAtiva(Long idRota) {
		LOG.info("Obtendo rota vers�o ativa");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSAO_ATIVA, RotaVersao.class);
		query.setParameter("idRota", idRota);

		if (!query.getResultList().isEmpty())
			return query.getSingleResult();
		else
			return null;
	}

	/**
	 * M�todo que busca todas rotas vers�es em edi��o daquela rota.
	 * 
	 */
	@Override
	public RotaVersao buscaVersaoEmEdicao(Long idRota) {
		LOG.info("Obtendo rota vers�o em edi��o");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSAO_EM_EDICAO, RotaVersao.class);
		query.setParameter("idRota", idRota);

		if (!query.getResultList().isEmpty())
			return query.getSingleResult();
		else
			return null;
	}

	@Override
	public RotaVersao buscaVersaoDesativada(Long idRota) {
		LOG.info("Obtendo rota vers�o desativada");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSAO_DESATIVADA, RotaVersao.class);
		query.setParameter("idRota", idRota);

		if (!query.getResultList().isEmpty())
			return query.getResultList().get(0);
		else
			return null;
	}
	
	/**
	 * M�todo que busca todas rotas vers�es daquela rota.
	 * 
	 */
	@Override
	public List<RotaVersao> buscaVersoes(Long idRota) {
		LOG.info("Obtendo vers�es da rota");
		TypedQuery<RotaVersao> query = getEntityManager().createNamedQuery(RotaVersao.QUERY_BUSCA_VERSOES, RotaVersao.class);
		query.setParameter("idRota", idRota);
		return query.getResultList();
	}

	/**
	 * M�todo que verifica se o novo posto que eu estou inserindo j� est� na
	 * lista.
	 * 
	 * @return Boolean
	 */
	@Override
	public Boolean isValidarListaPostosRepetidos(List<PostoCombustivel> postos, PostoCombustivel postoCombustivel) {
		if (postos.contains(postoCombustivel))
			return true;
		else
			return false;
	}

	/**
	 * M�todo que valida todos os campos da rota vers�o.
	 * 
	 * @param rotaVersao
	 * @throws BusinessException
	 */
	@Override
	public void validarCampos(RotaVersao rotaVersao) throws BusinessException {
		LOG.info("Iniciando valida��o de campos.");
		this.validarDuracao(rotaVersao.getDuracao());
		this.validarObservacao(rotaVersao.getObservacao());
		this.validarListaPostos(rotaVersao.getPostoCombustiveis());
		this.validarStatus(rotaVersao.getStatus());
		this.validarRota(rotaVersao.getRota());
	}

	/**
	 * M�todo que valida o campo dura��o que n�o pode ter mais que 3 digitos.
	 * 
	 * @param duracao
	 * @throws BusinessException
	 */
	@Override
	public void validarDuracao(Integer duracao) throws BusinessException {
		if(duracao == null)
			throw new BusinessException("mensagem.rota.versao.duracao.null");
		else if(duracao <= 0)
			throw new BusinessException("mensagem.rota.versao.duracao.igual.zero");
		else if(duracao > 999)
			throw new BusinessException("mensagem.rota.versao.duracao.maior");
	}

	
	/**
	 * M�todo que valida o campo observa��o de Rota Vers�o.
	 * 
	 * @param observacao
	 * @throws BusinessException
	 */
	@Override
	public void validarObservacao(String observacao) throws BusinessException {
		if (observacao.length() > 300)
			throw new BusinessException("mensagem.rota.versao.obersavao.maior");
	}

	/**
	 * M�todo que valida a lista de postos de combust�veis de Rota Vers�o.
	 * 
	 * @param postos
	 * @throws BusinessException
	 */
	@Override
	public void validarListaPostos(List<PostoCombustivel> postos) throws BusinessException {
		if (postos == null)
			throw new BusinessException("mensagem.rota.versao.lista.posto.null");
		else if (postos.isEmpty())
			throw new BusinessException("mensagem.rota.versao.lista.posto.vazia");
	}

	/**
	 * M�todo que valida o status da Rota Vers�o.
	 * 
	 * @param status
	 * @throws BusinessException
	 */
	@Override
	public void validarStatus(Integer status) throws BusinessException {
		if (status == null)
			throw new BusinessException("mensagem.rota.versao.status.null");
		else if (status <= 1 || status >= 3)
			throw new BusinessException("mensagem.rota.versao.status.opicoes");
	}

	/**
	 * M�todo que valida a rota da Rota Vers�o, pois n�o pode est� null.
	 * 
	 * @param rota
	 * @throws BusinessException
	 */
	@Override
	public void validarRota(Rota rota) throws BusinessException {
		if (rota == null)
			throw new BusinessException("mensagem.rota.versao.rota.null");
	}

	@Override
	public PageObjectDTO<RotaVersao> obterListaPaginadaDeRotasVersoesAtivas(
			PageObjectDTO<RotaVersao> paginaAtual) throws BusinessException {
		CriteriaBuilder builder = getEntityManager().getCriteriaBuilder();
		CriteriaQuery<RotaVersao> cQuery = builder.createQuery(getEntityClass());
		Root<RotaVersao> entidadeRoot = cQuery.from(getEntityClass());

		cQuery.select(entidadeRoot);
		Predicate clausulaWhere = construirCondicoesWhereApenasRotasAtivas(builder, entidadeRoot
		        );
		cQuery.where(clausulaWhere);
		cQuery.orderBy(buildOrderBy(builder, entidadeRoot ,paginaAtual));

		List<RotaVersao> dadosPaginados = retrivePagedData(paginaAtual);
		paginaAtual.setDados(dadosPaginados);

		int quantidadeTotalRegistros = getTotalEntitiesForPagination(paginaAtual);
		paginaAtual.setPageLength(quantidadeTotalRegistros);
		return paginaAtual;
	}
	
    @SuppressWarnings("unused")
	private int obterQuantidadeTotalRegistros(Predicate clausulaWhere, PageObjectDTO<RotaVersao> paginaAtual) {
        CriteriaBuilder builder = getEntityManager().getCriteriaBuilder();
        CriteriaQuery<Long> cQuery = builder.createQuery(Long.class);
        Root<RotaVersao> entidadeRoot = cQuery.from(getEntityClass());
        clausulaWhere.alias( entidadeRoot.getAlias());
        cQuery.select(builder.count(entidadeRoot));
        cQuery.where(clausulaWhere);
        Long quantidadeTotalRegistros = getEntityManager().createQuery(cQuery).getSingleResult();
        return quantidadeTotalRegistros.intValue();
    }

    public Predicate construirCondicoesWhereApenasRotasAtivas(CriteriaBuilder builder2, Root<RotaVersao> entidadeRoot2) {
        CriteriaQuery<RotaVersao> cQuery = builder2.createQuery(getEntityClass());
        Path<Object> statusRota = entidadeRoot2.get("status");
        return builder2.equal(statusRota, StatusRotaVersao.ATIVA.getCodigoSituacao());
    }
}