package br.com.devnagui.project.posto.manter;

import java.util.Collections;
import java.util.concurrent.TimeUnit;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.dbunit.annotation.ExpectedDataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy;
import br.com.devnagui.project.entities.Bomba;
import br.com.devnagui.project.entities.PostoCombustivel;
import br.com.devnagui.project.enums.TipoMedicaoBomba;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.BombaManagerBean;
import br.com.devnagui.project.manager.impl.ContribuinteManagerBean;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;
import br.com.devnagui.project.objetodepagina.MenuConvarObjetoDePagina;
import br.com.devnagui.project.objetodepagina.posto.manter.BombaObjetoDePagina;
import br.com.devnagui.project.posto.ManterPostoCombustivelSuiteDeTestes;

@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class BombaTesteFuncional {

	private static final String DATASET_ESPERADO_ALTERAR_BOMBA_XML = "datasetEsperadoAlterarBomba.xml";
	public static final String INSERIR_BOMBA_XML = "inserirBomba.xml";
	public static final long SEQ_BOMBA = -3L;
	private static final Logger LOG = Logger.getLogger(BombaTesteFuncional.class);

	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManager;

	@TestedObject
	@InjectIntoByType(target = "postoCombustivelManager")
	private ContribuinteManagerBean contribuinteManagerBean;

	@TestedObject
	private BombaManagerBean bombaManagerBean;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;
	private WebDriver driver;

	@Before
	public void abrirBrowser() {
		driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(ManterPostoCombustivelSuiteDeTestes.TEMPO_MAXIMO_TESTE_FUNCIONAL, TimeUnit.SECONDS);
	}

	@After
	public void fecharBrowser() {
		LOG.info("Finalizando os Testes funcionais.");
		driver.close();
	}

	@Test
	@DataSet(value = { TanqueTesteFuncional.INSERIR_POSTO_XML }, loadStrategy = InsertOrUpdateWithCommitLoadStrategy.class)
	public void testIncluirBomba() throws Exception {
		MenuConvarObjetoDePagina menuConvarObjetoDePagina = new MenuConvarObjetoDePagina(driver);
		menuConvarObjetoDePagina.chamaPaginaInicial();
		BombaObjetoDePagina paginaBomba = menuConvarObjetoDePagina.acionarManterPostoCombustivel()
				.digitaEEscolheNaBuscaPosto(TanqueTesteFuncional.CNPJ_POSTO_VALIDO.toString()).mudaAbaManutencaoDeBombas();
		paginaBomba.criarNovaBomba(createBombaNovaValida());
		Assert.assertTrue(paginaBomba.isBombaSalvaComSucesso());

	}

	@Test
	@DataSet(value = { TanqueTesteFuncional.INSERIR_POSTO_XML, INSERIR_BOMBA_XML }, loadStrategy = InsertOrUpdateWithCommitLoadStrategy.class)
	@ExpectedDataSet(value = { DATASET_ESPERADO_ALTERAR_BOMBA_XML })
	public void testAlterarBomba() throws Exception {
		MenuConvarObjetoDePagina menuConvarObjetoDePagina = new MenuConvarObjetoDePagina(driver);
		menuConvarObjetoDePagina.chamaPaginaInicial();
		BombaObjetoDePagina paginaManutencaoBomba = menuConvarObjetoDePagina.acionarManterPostoCombustivel()
				.digitaEEscolheNaBuscaPosto(TanqueTesteFuncional.CNPJ_POSTO_VALIDO.toString()).mudaAbaManutencaoDeBombas();
		Bomba bomba = getBombaParaAlteracao();
		bomba.setObservacaoBomba("Bomba dos testes funcionais alterada!");
		paginaManutencaoBomba.alterarBomba(bomba);
		Assert.assertTrue(paginaManutencaoBomba.isBombaSalvaComSucesso());
	}

	/**
	 * Serve para...
	 * 
	 * @return
	 * @throws BusinessException
	 */
	private Bomba getBombaParaAlteracao() throws BusinessException {
		Bomba bomba = bombaManagerBean.buscar(SEQ_BOMBA);
		bombaManagerBean.detach(bomba);
		return bomba;
	}

	/**
	 * Serve para...
	 * 
	 * @return
	 */
	private Bomba createBombaNovaValida() {
		PostoCombustivel posto = null;
		try {
			posto = postoCombustivelManager.buscar(TanqueTesteFuncional.SEQ_POSTO_DATASET);
		} catch (BusinessException e) {
			LOG.error("Mensagem de erro gen�rica, deve ser substitu�da por 006157C6", e);
		}
		Long numBomba = 1L;
		if (!posto.getBombas().isEmpty()) {
			// mOCK DE UM NUMERO DE TANQUE QUE AINDA NAO EXISTA NA BASE
			numBomba = Collections.max(posto.getBombas()).getNumBombaPosto() + 1;
		}
		Bomba bomba = new Bomba();
		bomba.setPostoCombustivel(posto);
		bomba.setNomeFabricanteBomba("Bomba de teste funcional");
		bomba.setNomeModeloBomba("Bomba de teste funcional");
		bomba.setNumBombaPosto(numBomba);
		bomba.setNumSerieBomba("Bomba de teste funcional");
		bomba.setObservacaoBomba("Bomba de teste funcional");
		bomba.setTipoMedicaoBomba(TipoMedicaoBomba.DIGITAL);
		return bomba;
	}

}
