package br.gov.ce.sefaz.project.objetodepagina.roteiro.manter;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

import br.gov.ce.sefaz.project.entities.Roteiro;
import br.gov.ce.sefaz.project.objetodepagina.MenuConvarObjetoDePagina;
import br.gov.ce.sefaz.project.objetodepagina.richfaces.tabela.paginacao.ExecutadorDeAcaoTabelaRichfacesHandler;
import br.gov.ce.sefaz.project.objetodepagina.richfaces.tabela.paginacao.TabelaPaginadaRichfacesHandler;

/**
 * Objeto responsavel por conhecer a lógica de acesso e manipulação dos
 * elementos das paginas do caso de uso de manter roteiro.
 * 
 * @author 006157C6
 * 
 */
public class AtribuirRoteiroObjetoDePagina extends MenuConvarObjetoDePagina {

    /**
     * LOG VAR.
     */
    private static final Logger LOG = Logger.getLogger(AtribuirRoteiroObjetoDePagina.class);
    
    public AtribuirRoteiroObjetoDePagina(WebDriver driver) throws Exception {
        super(driver);
    }

    /**
     * Campo onde eh digitado a matricula ou nome do fiscal procurado.
     */
    @FindBy(id = "matriculaUsuarioInput")
    private WebElement matriculaUsuarioInput;

    /**
     * Span que contem a resposta do campo onde eh digitado a matricula ou nome
     * do fiscal procurado. Deve ser clicado para que o fiscal seja de fato
     * escolhido.
     */
    @FindBy(id = "matUsuarioList")
    private WebElement matUsuarioList;

    /**
     * Input do data de inicio.
     */
    @FindBy(id = "dataInicioInputDate")
    private WebElement dataInicioInput;

    /**
     * Input do data de fim.
     */
    @FindBy(id = "dataFimInputDate")
    private WebElement dataFimInput;

    /**
     * A tabela de fiscais na tela de atribuir fiscais.
     */
    @FindBy(id = "tabelaFiscal")
    private WebElement tabelaFiscal;

    /**
     * Cria um novo roteiro conforme o fiscal, rota e periodo informado no
     * roteiro passado como parametro. <br/>
     * <b>*Não verifica se o periodo está válido*</b><br/>
     * Leva como padrao o id que é ajustado na tabela, linhas e colunas do
     * richfaces. <br/>
     * <b>Padrão: nomeTabela:numeroDaLinha:nomeColuna:numeroColuna <br/>
     * Onde o numeroDaLinha e numeroColuna são inteiros comecando por zero.</b>
     * 
     * @param novoRoteiroValido
     *            um roteiro novo.
     * @return O objeto de pagina de atribuir roteiro.
     * @throws InterruptedException Quando o tempo limite de espera é alcançado.
     */
    public AtribuirRoteiroObjetoDePagina atribuirRoteiro(final Roteiro novoRoteiroValido) throws InterruptedException {

        String matricula = novoRoteiroValido.getFiscal().getUsuario().getMatricula();
        TabelaPaginadaRichfacesHandler tabelaFiscalHandler = new TabelaPaginadaRichfacesHandler(driver, "tabelaFiscal", "colunaMatriculaFiscal", "radioFiscal", "paginadorFiscais", matricula,
                new ExecutadorDeAcaoTabelaRichfacesHandler() {
                    @Override
                    public void realizarAcao(final WebDriver driver, final String idObjetoAcao) {
                        driver.findElement(By.id(idObjetoAcao+":0")).click();
                    }
                });
        tabelaFiscalHandler.realizarBuscaEAcao();
        
        String nomeRota = novoRoteiroValido.getRotaVersao().getRota().getNome();
        TabelaPaginadaRichfacesHandler tabelaRotaHandler = new TabelaPaginadaRichfacesHandler(driver, "tabelaRotaVersao", "colunaNomeRota", "radioRotaVersao", "paginadorRotaVersao", nomeRota,
                new ExecutadorDeAcaoTabelaRichfacesHandler() {
                    @Override
                    public void realizarAcao(final WebDriver driver, final String idColunaDeAcao) {
                        driver.findElement(By.id(idColunaDeAcao+":0")).click();
                    }
                });
        tabelaRotaHandler.realizarBuscaEAcao();
        PageFactory.initElements(driver, this);
        //Clica na data de inicio e espera a data final renderizar.
        driver.findElement(By.id("dataInicioPopupButton")).click();
        driver.findElement(By.xpath("//span[@id=\"dataInicio\"]/table/tbody/tr[9]/td[@id=\"dataInicioFooter\"]/table/tbody/tr/td[5]/div")).click();
        //Salva o roteiro.
        PageFactory.initElements(driver, this);
        esperarRenderizarElementoPor(By.id("salvarRoteiro"));
        driver.findElement(By.id("salvarRoteiro")).click();
        
        return this;
    }

    /**
     * Método responsável pela lógica de input na tela de atribuir roteiro.
     * 
     * @param nomeOuMatriculaDoFiscalParam
     * @return
     */
    public AtribuirRoteiroObjetoDePagina digitaMatriculaOuNomeFiscalProcurado(final String nomeOuMatriculaDoFiscalParam) {
        LOG.info("Digitando no criteiro de busca de fiscal.");
        matriculaUsuarioInput.sendKeys(nomeOuMatriculaDoFiscalParam);
        try {
            esperaRenderizarMensagemComRegex("^[\\s\\S]*" + nomeOuMatriculaDoFiscalParam + "[\\s\\S]*$");
        } catch (InterruptedException e) {
            LOG.error(e);
        }
        LOG.info("Escolhendo primeiro fiscal digitado.");
        matUsuarioList.click();

        return this;
    }

    public boolean isRoteiroAtribuidoComSucesso() throws InterruptedException {
        esperarRenderizarElementoPor(By.xpath("//li[@class=\"success\"]"));
        String mensagem = driver.findElement(By.xpath("//li[@class=\"success\"]")).getText();
        LOG.info("Mensagem de sucesso: "+mensagem);
        return mensagem.contains("Roteiro incluído com sucesso.");
    }
    
   
}
