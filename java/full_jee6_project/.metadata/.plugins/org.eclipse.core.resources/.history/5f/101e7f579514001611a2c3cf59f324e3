/**
 * Criado por 006157C6 em 09/04/2013
 */
package br.com.devnagui.project.manager.posto.manter;

import java.util.Collections;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.apache.log4j.Logger;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.entities.PostoCombustivel;
import br.com.devnagui.project.entities.ProdutoCombustivel;
import br.com.devnagui.project.entities.Tanque;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;
import br.com.devnagui.project.manager.impl.TanqueManagerBean;

/**
 * Criado por @author 006157C6 em 09/04/2013
 * 
 */
@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class TanqueManagerBeanTest {

	// ATRIBUTOS E CONSTRUTORES
	public static final long SEQ_TANQUE_1 = -3L;

	public static final String INSERIR_TANQUE_XML = "inserirTanque.xml";
	private static final String INSERIR_TANQUE_2_XML = "inserirTanque2.xml";

	private static final Logger LOG = Logger.getLogger(TanqueManagerBeanTest.class);

	@TestedObject
	private TanqueManagerBean tanqueManager;

	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManager;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;

	// METODOS PUBLICOS

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_TANQUE_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInsertTanqueSucesso() throws BusinessException {
		LOG.info("Testando insercao de tanque.");
		Tanque entidade = obterTanqueValidoParaInsercao();
		tanqueManager.inserir(entidade);
		LOG.info("Finalizando teste de insercao de tanque.");
	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_TANQUE_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testAlterarTanqueSucesso() throws BusinessException {
		LOG.info("Testando alteracao de tanque.");

		Tanque tanqueDataSet = tanqueManager.buscar(SEQ_TANQUE_1);
		tanqueManager.removerDoContexto(tanqueDataSet);
		tanqueDataSet.setObservacao("Tanque 999 alterado com sucesso!");
		Tanque tanqueAlterado = tanqueManager.alterar(tanqueDataSet);
		tanqueDataSet = tanqueManager.buscar(SEQ_TANQUE_1);
		Assert.assertEquals(tanqueAlterado.getObservacao(), "Tanque 999 alterado com sucesso!");

		LOG.info("Finalizando teste de alteracao de tanque.");
	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_TANQUE_XML, INSERIR_TANQUE_2_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testBuscaTanquesDoPosto() throws BusinessException {
		LOG.info("Testando busca de todos os tanque.");
		PostoCombustivel postoCombustivel = postoCombustivelManager.buscar(PostoCombustivelManagerBeanTest.SEQ_POSTO_1);
		List<Tanque> tanquesDoPosto = tanqueManager.obterTanquesDoPosto(postoCombustivel.getId());
		Assert.assertNotNull(tanquesDoPosto);
		Assert.assertTrue(tanquesDoPosto.size() >= 2);
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_TANQUE_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirTanqueNaoUnicoException() throws BusinessException {
		LOG.info("Testando insercao de tanque nao unico.");
		Tanque entidade = obterTanqueValidoParaInsercao();
		entidade.setNumTanquePosto(1L);
		try {
			tanqueManager.inserir(entidade);
		} catch (BusinessException e) {
			Assert.assertEquals("msg.aba.tanque.tanqueEscolhido.numero.unico", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_TANQUE_XML, INSERIR_TANQUE_2_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testAlterarTanqueNaoUnicoException() throws BusinessException {
		LOG.info("Testando alterar de tanque nao unico.");
		Tanque tanque = tanqueManager.buscar(SEQ_TANQUE_1);
		tanqueManager.removerDoContexto(tanque);
		tanque.setNumTanquePosto(2L);
		try {
			tanqueManager.alterar(tanque);
		} catch (BusinessException e) {
			Assert.assertEquals("msg.aba.tanque.tanqueEscolhido.numero.unico", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_TANQUE_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testAlterarNumTanqueObrigatorioException() throws BusinessException {
		LOG.info("Testando alterar de tanque nao unico.");
		Tanque tanque = tanqueManager.buscar(SEQ_TANQUE_1);
		tanqueManager.removerDoContexto(tanque);
		tanque.setNumTanquePosto(0L);
		try {
			tanqueManager.alterar(tanque);
		} catch (BusinessException e) {
			Assert.assertEquals("msg.aba.tanque.tanqueEscolhido.numero.obrigatorio", e.getMessage());
			throw e;
		}
	}

	// METODOS PRIVADOS

	/**
	 * cRIA UM NOVO TANQUE VALIDO DE ACORDO COM A BASE.
	 * 
	 * @return
	 * @throws BusinessException
	 */
	private Tanque obterTanqueValidoParaInsercao() throws BusinessException {
		PostoCombustivel posto = null;
		posto = postoCombustivelManager.buscar(PostoCombustivelManagerBeanTest.SEQ_POSTO_1);
		postoCombustivelManager.inicializarObjetoOuColecao(posto.getTanques());
		postoCombustivelManager.removerDoContexto(posto);

		Tanque tanque = new Tanque();
		if (posto != null) {
			Long numTanqueNovo = 1L;
			if (!posto.getTanques().isEmpty()) {
				// mOCK DE UM NUMERO DE TANQUE QUE AINDA NAO EXISTA NA BASE
				numTanqueNovo = Collections.max(posto.getTanques()).getNumTanquePosto() + 1;
			}
			tanque.setNumTanquePosto(numTanqueNovo);
			tanque.setCapacidade(999L);
			tanque.setObservacao("Tanque novo criado por teste de insercao");
			ProdutoCombustivel produtoCombustivel = new ProdutoCombustivel();
			produtoCombustivel.setId(16L);
			tanque.setProdutoCombustivel(produtoCombustivel);
			tanque.setPostoCombustivel(posto);

		}
		return tanque;
	}
	// GETS E SETS
}
