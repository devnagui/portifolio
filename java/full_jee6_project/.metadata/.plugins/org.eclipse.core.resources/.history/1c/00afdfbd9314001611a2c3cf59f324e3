/**
 * Criado por 006157C6 em 16/04/2013
 */
package br.gov.ce.project.manager.posto.manter;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.apache.log4j.Logger;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.dto.PostoCombustivelDTO;
import br.com.devnagui.project.entities.PostoCombustivel;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.ContribuinteManagerBean;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;

/**
 * Criado por @author 006157C6 em 16/04/2013
 * 
 */
@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class PostoCombustivelManagerBeanTest {

	// ATRIBUTOS E CONSTRUTORES

	private static final long CNPJ_POSTO_TESTE1 = 7346349000129L;
    public static final String INSERIR_POSTO_XML = "inserirPosto.xml";
	public static final Long SEQ_POSTO_1 = -99L;
	private static final Logger LOG = Logger.getLogger(PostoCombustivelManagerBeanTest.class);

	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManager;

	@InjectIntoByType(target = "postoCombustivelManager")
	@TestedObject
	private ContribuinteManagerBean contribuinteManagerBean;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;

	// METODOS PUBLICOS

	@Test
	@DataSet(value = { INSERIR_POSTO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testVerificaPostoAtivo() throws BusinessException {
		LOG.info("Iniciando teste para verificar posto ativo");
		Assert.assertTrue(postoCombustivelManager.isPostoCombustivelAtivoNaSefaz(CNPJ_POSTO_TESTE1));
		LOG.info("Finalizando teste para verificar posto ativo");

	}

	@Test
	@DataSet(value = { INSERIR_POSTO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testObterPostoAtivo() throws BusinessException {
		LOG.info("Iniciando teste para obter postos ativos por CNPJ");
		PostoCombustivel postoCombustivelAtivoNaSefaz = postoCombustivelManager.obterPostoCombustivelAtivoNaSefaz(CNPJ_POSTO_TESTE1);
		Assert.assertEquals(CNPJ_POSTO_TESTE1, postoCombustivelAtivoNaSefaz.getContribuinte().getCnpj().longValue());
		LOG.info("Finalizando teste para obter postos ativos por CNPJ");

	}

	@Test
	@DataSet(value = { INSERIR_POSTO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testObterPostosDTOPorCNPJ() throws BusinessException {
		LOG.info("Iniciando teste para obter posto DTO por CNPJ");
		List<PostoCombustivelDTO> postoCombustivelAtivoNaSefaz = postoCombustivelManager.obterPostosCombustiveisPorRazaoOuCNPJ(Long.toString(CNPJ_POSTO_TESTE1));
		Assert.assertTrue(!postoCombustivelAtivoNaSefaz.isEmpty());
		LOG.info("Finalizando teste para obter posto DTO por CNPJ");
	}

	@Test
	@DataSet(value = { INSERIR_POSTO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testObterPostosDTOPorRazao() throws BusinessException {
		LOG.info("Iniciando teste para obter posto DTO por CNPJ");
		List<PostoCombustivelDTO> postoCombustivelAtivoNaSefaz = postoCombustivelManager.obterPostosCombustiveisPorRazaoOuCNPJ("");
		Assert.assertTrue(!postoCombustivelAtivoNaSefaz.isEmpty());
		LOG.info("Finalizando teste para obter posto DTO por CNPJ");
	}

	@Test(expected = BusinessException.class)
	public void testObterPostoAtivoDTOContribuinteInexistente() throws BusinessException {
		LOG.info("Iniciando teste para obter posto DTO por CNPJ inexistente");
		try {
			postoCombustivelManager.obterPostosCombustiveisPorRazaoOuCNPJ("000000000000");
		} catch (BusinessException e) {
			Assert.assertEquals("msg.buscaPosto.contribuinteInexistente", e.getMessage());
			LOG.info("Finalizando teste para obter posto DTO por CNPJ inexistente");
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	public void testObterPostoAtivoDTOPorCNPJContribuinteNaoEhPosto() throws BusinessException {
		LOG.info("Iniciando teste para obter posto DTO por CNPJ, contribuinte nao eh posto");
		try {
			postoCombustivelManager.obterPostosCombustiveisPorRazaoOuCNPJ("7345242000166");
		} catch (BusinessException e) {
			Assert.assertEquals("msg.buscaPosto.naoEhPostoValido", e.getMessage());
			LOG.info("Finalizando teste para obter posto DTO por CNPJ, contribuinte nao eh posto");
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	public void testObterPostoAtivoContribuinteInativo() throws BusinessException {
		LOG.info("Iniciando teste para obter posto DTO por CNPJ INATIVO");
		try {
			postoCombustivelManager.obterPostosCombustiveisPorRazaoOuCNPJ("73465390001");
		} catch (BusinessException e) {
			Assert.assertEquals("msg.buscaPosto.contribuinteInativo", e.getMessage());
			LOG.info("Finalizando teste para obter posto DTO por CNPJ INATIVO");
			throw e;
		}
	}

	// METODOS PRIVADOS

	// GETS E SETS
}
