/**
 * Criado por 006157C6 em 09/04/2013
 */
package br.com.devnagui.project.manager.fiscal.manter;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.apache.log4j.Logger;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.dto.PageObjectDTO;
import br.com.devnagui.project.entities.Fiscal;
import br.com.devnagui.project.entities.HistoricoHabilitaFiscal;
import br.com.devnagui.project.entities.Usuario;
import br.com.devnagui.project.enums.SituacaoFiscal;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.FiscalManagerBean;
import br.com.devnagui.project.manager.impl.UsuarioManagerBean;

@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class FiscalManagerBeanTest {

	// ATRIBUTOS E CONSTRUTORES

	private static final Logger LOG = Logger.getLogger(FiscalManagerBeanTest.class);

	@TestedObject
	private FiscalManagerBean fiscalManager;
	
	@TestedObject
	@InjectIntoByType(target="fiscalManager")
	private UsuarioManagerBean usuarioManager;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;
	
	private static final Long SEQ_FISCAL_HABILITADO_INSERIDO_POR_XML = 1L;
	private static final Long SEQ_FISCAL_DESABILITADO_INSERIDO_POR_XML = 4L;
	
	private static final String MATRICULA_USUARIO_COMPLETA_SUCESSO_1 = "00688711";
	private static final String NOME_USUARIO_COMPLETO_SUCESSO_1 = "ANTONIO VALDIR ROSENO";
	
	private static final String MATRICULA_USUARIO_COMPLETA_SUCESSO_2 = "10359112";
	
	private static final String MATRICULA_USUARIO_INCOMPLETA_SUCESSO_1 = "0068";
	private static final String NOME_USUARIO_INCOMPLETO_SUCESSO_1 = "ANTONIO VAL";
		
	private static final String MATRICULA_USUARIO_COMPLETA_EXCEPTION = "########";
	private static final String NOME_USUARIO_COMPLETO_EXCEPTION = "#A#N#T#O#N#I#O# #V#A#L#D#I#R# #R#O#S#E#N#O#";
	
	private static final String INSERIR_FISCAL_HABILITADO_XML = "inserirFiscalHabilitado.xml";
	private static final String INSERIR_FISCAL_DESABILITADO_XML = "inserirFiscalDesabilitado.xml";
	
	// METODOS PUBLICOS
		
		@Test
		public void testBuscarUsuariosPorMatriculaSucesso() {
			LOG.info("Testando busca de usu�rios por matr�cula(sucesso).");
			final List<Usuario> usuarios = usuarioManager.obterUsuariosPorMatriculaOuNome(MATRICULA_USUARIO_INCOMPLETA_SUCESSO_1);
			
			for(final Usuario usuario: usuarios){
				final boolean matriculaContemParametroBuscado = usuario.getMatricula().contains(MATRICULA_USUARIO_INCOMPLETA_SUCESSO_1);
				Assert.assertTrue(matriculaContemParametroBuscado);
			}
			LOG.info("Finalizando teste de busca de usu�rios por matr�cula(sucesso).");
		}
		
		@Test
		public void testBuscarUsuarioPorNomeSucesso() {
			LOG.info("Testando busca de usu�rios por nome(sucesso).");
			final List<Usuario> usuarios = usuarioManager.obterUsuariosPorMatriculaOuNome(NOME_USUARIO_INCOMPLETO_SUCESSO_1);

			for(final Usuario usuario: usuarios){
				final boolean nomeContemParametroBuscado = usuario.getNome().contains(NOME_USUARIO_INCOMPLETO_SUCESSO_1);
				Assert.assertTrue(nomeContemParametroBuscado);
			}
			LOG.info("Finalizando teste de busca de usu�rios por nome(sucesso).");
		}
		
		@Test
		public void testBuscarUsuarioPorMatriculaENomeSucesso() throws BusinessException {
			LOG.info("Testando busca de usu�rios por matricula E nome(sucesso).");
			final Usuario usuario = usuarioManager.obterUsuarioPorMatriculaNome(MATRICULA_USUARIO_COMPLETA_SUCESSO_1, NOME_USUARIO_COMPLETO_SUCESSO_1);
			final String matricula = usuario.getMatricula();
			final String nome = usuario.getNome();
			final boolean nomeMatriculaIguaisParametros = matricula.equalsIgnoreCase(MATRICULA_USUARIO_COMPLETA_SUCESSO_1) && nome.equalsIgnoreCase(NOME_USUARIO_COMPLETO_SUCESSO_1);
			
			Assert.assertTrue(nomeMatriculaIguaisParametros);
			LOG.info("Finalizando teste de busca de usu�rios por nome(sucesso).");
		}
		
		@Test
		public void testBuscarUsuarioPorMatriculaOuNomeSucesso() throws BusinessException {
			LOG.info("Testando busca de usu�rios por matricula OU nome(sucesso).");
			Usuario usuario = null; 
			
			usuario = usuarioManager.obterUsuarioPorMatriculaOuNome(MATRICULA_USUARIO_COMPLETA_SUCESSO_1);
			final boolean matriculaIgualParametro = usuario.getMatricula().equalsIgnoreCase(MATRICULA_USUARIO_COMPLETA_SUCESSO_1);
			Assert.assertTrue(matriculaIgualParametro);
			
			usuario = usuarioManager.obterUsuarioPorMatriculaOuNome(NOME_USUARIO_COMPLETO_SUCESSO_1);
			final boolean nomeIgualParametro = usuario.getNome().equalsIgnoreCase(NOME_USUARIO_COMPLETO_SUCESSO_1);
			Assert.assertTrue(nomeIgualParametro);
			
			LOG.info("Finalizando teste de busca de usu�rios por nome(sucesso).");
		}					
		
		@Test
        @DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_DESABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
        public void testHabilitarFiscalDesabilitadoSucesso() throws BusinessException {
            LOG.info("Testando habilitar fiscal desabilitado(sucesso).");
            final Fiscal fiscal = fiscalManager.searchForId(SEQ_FISCAL_DESABILITADO_INSERIDO_POR_XML);
            fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
            fiscalManager.habilitarFiscal(fiscal);
            
            Assert.assertEquals(SituacaoFiscal.HABILITADO, fiscal.getSituacaoFiscal());
            LOG.info("Finalizando teste habilitar fiscal desabilitado(sucesso).");
        }
		
		@Test
		public void testHabilitarNovoFiscalSucesso() throws BusinessException {
			LOG.info("Testando habilitar novo fiscal(sucesso).");
			final Fiscal fiscal = criarNovoFiscalComUsuarioValido();
			fiscalManager.habilitarFiscal(fiscal);
			
			Assert.assertEquals(SituacaoFiscal.HABILITADO, fiscal.getSituacaoFiscal());
			LOG.info("Finalizando teste habilitar novo fiscal(sucesso).");
		}
		
		
		
		@Test
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testDesabilitarFiscalHabilitadoSucesso() throws BusinessException {
			LOG.info("Testando desabilitar fiscal habilitado(sucesso).");
			final PageObjectDTO<Fiscal> paginaDTO = new PageObjectDTO<Fiscal>(1);
			final Fiscal fiscal = fiscalManager.obterListaPaginadaSimples(paginaDTO).getDados().get(0);
			
			fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
			fiscalManager.desabilitarFiscal(fiscal);
			
			Assert.assertEquals(SituacaoFiscal.DESABILITADO, fiscal.getSituacaoFiscal());
			LOG.info("Finalizando teste desabilitar fiscal habilitado(sucesso).");
		}
		
		@Test
		public void testVerificarSeSistemaMantemHistoricoDeFiscaisHabilitadosSucesso() throws Exception{
			LOG.info("Testando se sistema mantem historico de fiscal habilitado(sucesso).");
			final Fiscal fiscal = criarNovoFiscalComUsuarioValido();
			
			fiscalManager.habilitarFiscal(fiscal);
			fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
			
			final HistoricoHabilitaFiscal historicoFiscalHabilitado = fiscalManager.obterHistoricoVigenteFiscalHabilitado(fiscal);
			final boolean fiscalPossuiHistoricoValido = historicoFiscalHabilitado != null && historicoFiscalHabilitado.getDataHabilitacao() != null && historicoFiscalHabilitado.getDataDesabilitacao() == null;
			
			Assert.assertTrue(fiscalPossuiHistoricoValido);
			LOG.info("Finalizando teste para ver se o sistema mantem historico de fiscal habilitado(sucesso).");
		}
		
		@Test
		public void testVerificarSeSistemaMantemHistoricoDeFiscaisDesabilitadosSucesso() throws Exception{
			LOG.info("Testando se sistema mantem historico de fiscal desabilitado(sucesso).");
			final Fiscal fiscal = criarNovoFiscalComUsuarioValido();
			
			fiscalManager.habilitarFiscal(fiscal);
			fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
			fiscalManager.desabilitarFiscal(fiscal);
			
			for(HistoricoHabilitaFiscal historico: fiscal.getHistoricoHabilitacaoFiscal()){
				final boolean isDataHabilitacaoValida = historico.getDataHabilitacao() != null;
				final boolean isDataDesabilitacaoValida = historico.getDataDesabilitacao() != null;
				
				Assert.assertTrue(isDataHabilitacaoValida && isDataDesabilitacaoValida);
			}
			
			LOG.info("Finalizando teste para ver se o sistema mantem historico de fiscal desabilitado(sucesso).");
		}
		
		@Test
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML, INSERIR_FISCAL_DESABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testBuscarTodosFiscaisSucesso() throws BusinessException {
			LOG.info("Testando busca de todos os fiscais(sucesso).");
			final List<Fiscal> todosFiscais = fiscalManager.buscarTodos();
			final boolean retornouAlgumFiscal = todosFiscais != null && todosFiscais.size() > 0;
			
			Assert.assertTrue(retornouAlgumFiscal);
			LOG.info("Finalizando teste de busca de todos os fiscais(sucesso).");
		}
		
		@Test
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML, INSERIR_FISCAL_DESABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testBuscarApenasFiscaisHabilitadosSucesso() throws Exception{
			LOG.info("Testando busca apenas de fiscais habilitados(sucesso).");
			final PageObjectDTO<Fiscal> paginaDTO = new PageObjectDTO<Fiscal>(1);
			final List<Fiscal> todosFiscaisHabilitados = fiscalManager.obterListaPaginadaSimples(paginaDTO).getDados();
			
			for(final Fiscal fiscal: todosFiscaisHabilitados){
				Assert.assertEquals(SituacaoFiscal.HABILITADO, fiscal.getSituacaoFiscal());
			}
			LOG.info("Finalizando teste de busca apenas de fiscais habilitados(sucesso).");
		}
		
		@Test
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testVerificarFiscaisHabilitadosSeDataHabilitacaoPreenchidaDataDesabilitacaoNulaSucesso() throws Exception{
			LOG.info("Testando busca apenas de fiscais habilitados(sucesso).");
			final PageObjectDTO<Fiscal> paginaDTO = new PageObjectDTO<Fiscal>(1);
			final List<Fiscal> todosFiscaisHabilitados = fiscalManager.obterListaPaginadaSimples(paginaDTO).getDados();
			
			for(final Fiscal fiscal: todosFiscaisHabilitados){
				fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
				final HistoricoHabilitaFiscal historicoVigente = fiscalManager.obterHistoricoVigenteFiscalHabilitado(fiscal);
				final boolean isDataHabilitacaoPreenchida = historicoVigente.getDataHabilitacao() != null;				
				final boolean isDataDesabilitacaoNula = historicoVigente.getDataDesabilitacao() == null;			
				
				Assert.assertTrue(isDataHabilitacaoPreenchida && isDataDesabilitacaoNula);
			}
			LOG.info("Finalizando teste de busca apenas de fiscais habilitados(sucesso).");
		}
		
		@Test
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testBuscarFiscalPorMatriculaUsuarioSucesso() {
			LOG.info("Testando busca de fiscais por matricula do usu�rio(sucesso).");
			final Fiscal fiscal = fiscalManager.obterFiscalPorMatriculaUsuario(MATRICULA_USUARIO_COMPLETA_SUCESSO_1);
			
			Assert.assertEquals(MATRICULA_USUARIO_COMPLETA_SUCESSO_1, fiscal.getUsuario().getMatricula());
			LOG.info("Finalizando teste de busca de fiscais por matricula do usu�rio(sucesso).");
		}
		
		@Test(expected = BusinessException.class)
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testHabilitarFiscalJaHabilitadoException() throws BusinessException {
			LOG.info("Testando habilitar fiscal ja habilitado(exception).");
			final Fiscal fiscal = fiscalManager.searchForId(SEQ_FISCAL_HABILITADO_INSERIDO_POR_XML);
			fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
			try {
				fiscalManager.habilitarFiscal(fiscal);
			} catch (BusinessException e) {
				Assert.assertEquals("mensagem.fiscal.ja.habilitado", e.getMessage());
				LOG.info("Finalizando teste habilitar fiscal ja habilitado(exception).");
				throw e;
			}
		}
		
		@Test(expected = BusinessException.class)
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_DESABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testDesabilitarFiscalJaDesabilitadoException() throws BusinessException {
			LOG.info("Testando desabilitar fiscal ja desabilitado(exception).");
			final Fiscal fiscal = fiscalManager.searchForId(SEQ_FISCAL_DESABILITADO_INSERIDO_POR_XML);
			fiscalManager.inicializarObjetoOuColecao(fiscal.getHistoricoHabilitacaoFiscal());
			try {
				fiscalManager.desabilitarFiscal(fiscal);
			} catch (BusinessException e) {
				Assert.assertEquals("mensagem.fiscal.ja.desabilitado", e.getMessage());
				LOG.info("Finalizando teste desabilitar fiscal ja desabilitado(exception).");
				throw e;
			}
		}
		
		@Test(expected = BusinessException.class)
		public void testHabilitarFiscalUsuarioNaoInformadoException() throws BusinessException {
			LOG.info("Testando habilitar fiscal com usu�rio n�o informado(exception).");
			final Fiscal fiscal = new Fiscal();
			try {
				fiscalManager.habilitarFiscal(fiscal);
			} catch (BusinessException e) {
				Assert.assertEquals("mensagem.usuario.nao.informado", e.getMessage());
				LOG.info("Finalizando teste habilitar fiscal com usu�rio n�o informado(exception).");
				throw e;
			}
		}
		
		@Test(expected = BusinessException.class)
		public void testDesabilitarFiscalNaoSelecionadoException() throws BusinessException {
			LOG.info("Testando desabilitar fiscal nao selecionado(exception).");
			final Fiscal fiscal = new Fiscal();
			fiscal.setHistoricoHabilitacaoFiscal(new ArrayList<HistoricoHabilitaFiscal>());
			try {
				fiscalManager.desabilitarFiscal(fiscal);
			} catch (BusinessException e) {
				Assert.assertEquals("mensagem.fiscal.nao.selecionado.para.desabilitacao", e.getMessage());
				LOG.info("Finalizando teste desabilitar fiscal nao selecionado(exception).");
				throw e;
			}
		}
		
		@Test(expected = BusinessException.class)
		public void testHabilitarFiscalNuloException() throws BusinessException {
			LOG.info("Testando habilitar fiscal nulo(exception).");
			final Fiscal fiscal = null;
			try {
				fiscalManager.habilitarFiscal(fiscal);
			} catch (BusinessException e) {
				Assert.assertEquals("mensagem.fiscal.null", e.getMessage());
				LOG.info("Finalizando teste habilitar fiscal nulo(exception).");
				throw e;
			}
		}
		
		@Test(expected = BusinessException.class)
		public void testHabilitarFiscalComUsuarioInexistenteException() throws BusinessException {
			LOG.info("Testando habilitar fiscal com usu�rio inexistente(exception).");
			final Usuario usuario = new Usuario();
			usuario.setNome(NOME_USUARIO_COMPLETO_EXCEPTION);
			usuario.setMatricula(MATRICULA_USUARIO_COMPLETA_EXCEPTION);
			
			final Fiscal fiscal = new Fiscal();
			fiscal.setUsuario(usuario);
			fiscal.setHistoricoHabilitacaoFiscal(new ArrayList<HistoricoHabilitaFiscal>());
			try {
				fiscalManager.habilitarFiscal(fiscal);
			} catch (BusinessException e) {
				Assert.assertEquals("mensagem.usuario.nao.existe", e.getMessage());
				LOG.info("Finalizando teste habilitar fiscal com usu�rio inexistente(exception).");
				throw e;
			}
		}		
		
		@Test
		@DataSet(value = { "inserirUsuarios.xml",INSERIR_FISCAL_HABILITADO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
		public void testBuscarFiscaisHabilitados() {
			List<Fiscal> fiscaisHabilitados = fiscalManager.obterFiscalPorMatriculaOuNome("00688711");
			Assert.assertTrue(fiscaisHabilitados.size() > 0);
		}
		
	// METODOS PRIVADOS
		
		/**
		 * Cria um novo fiscal, que j� possui um usu�rio apto a ser fiscal.
		 * 
		 * @return {@link Fiscal}
		 * @throws BusinessException
		 */
		private Fiscal criarNovoFiscalComUsuarioValido() throws BusinessException {
			final Usuario usuario = buscarUsuarioAptoASerFiscal();
			final Fiscal fiscal = new Fiscal();
			fiscal.setUsuario(usuario);
			fiscal.setHistoricoHabilitacaoFiscal(new ArrayList<HistoricoHabilitaFiscal>());
			
			return fiscal;
		}
			
		/**
		 * Busca um usu�rio que j� n�o seja Fiscal.
		 * 
		 * @return {@link Usuario}
		 * @throws BusinessException
		 */
		@SuppressWarnings("unchecked")
		private Usuario buscarUsuarioAptoASerFiscal() throws BusinessException {
			final String selectUsuariosNaoFiscais = "select u from Usuario u where u.id not in (select f.usuario.id from Fiscal f) and u.matricula not in (:matriculaUsuariosInseridosPorXML) order by u.id desc)";
			final Query queryUsuariosNaoFiscais = entityManager.createQuery(selectUsuariosNaoFiscais);
			queryUsuariosNaoFiscais.setParameter("matriculaUsuariosInseridosPorXML", criarListaComMatriculasUsuarioInseridosPorXML());
			queryUsuariosNaoFiscais.setMaxResults(10);
			final List<Usuario> usuarios = queryUsuariosNaoFiscais.getResultList();
			
			return usuarios.get(0);
		}
		
		/**
		 * Cria uma Lista com as matriculas dos usu�rios que s�o inseridos por XML.
		 * 
		 * @return {@link List<String>}
		 * @throws BusinessException
		 */
		private List<String> criarListaComMatriculasUsuarioInseridosPorXML() {
			final List<String> matriculaUsuariosInseridosPorXML = new ArrayList<String>();
			
			matriculaUsuariosInseridosPorXML.add(MATRICULA_USUARIO_COMPLETA_SUCESSO_1);
			matriculaUsuariosInseridosPorXML.add(MATRICULA_USUARIO_COMPLETA_SUCESSO_2);
			
			return matriculaUsuariosInseridosPorXML; 
		}
}