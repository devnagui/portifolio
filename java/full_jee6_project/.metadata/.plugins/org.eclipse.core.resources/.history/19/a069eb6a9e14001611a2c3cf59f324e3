package br.com.devnagui.project.entities;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

@Entity
@Table(name = "ROTA_VERSAO",schema="PROJECT")
@SequenceGenerator(name = "SQ_ROTA_VERSAO", sequenceName = "SQ_ROTA_VERSAO", allocationSize = 1, initialValue = 1)
@NamedQueries(value = {
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSAO_ATIVA_OU_EM_EDICAO, query = "SELECT rv FROM RotaVersao rv WHERE (rv.status = 1 OR rv.status = 2) AND rv.rota.id = :idRota ORDER BY rv.status DESC"),
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSAO_ATIVA_E_EM_EDICAO, query = "SELECT rv FROM RotaVersao rv WHERE (rv.status = 1 OR rv.status = 2) AND rv.rota.id = :idRota ORDER BY rv.status ASC"),
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSAO_ATIVA_OU_DESATIVADA, query = "SELECT rv FROM RotaVersao rv WHERE (rv.status = 1 OR rv.status = 3) AND rv.rota.id = :idRota ORDER BY rv.status ASC"),
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSAO_ATIVA, query = "SELECT rv FROM RotaVersao rv WHERE rv.status = 1 AND rv.rota.id = :idRota"),
		@NamedQuery(name = RotaVersao.QUERY_LISTAR_VERSOES_ATIVAS, query = "SELECT rv FROM RotaVersao rv WHERE rv.status = 1 ORDER BY rv.rota.numero ASC"),
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSAO_EM_EDICAO, query = "SELECT rv FROM RotaVersao rv WHERE rv.status = 2 AND rv.rota.id = :idRota"),
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSAO_DESATIVADA, query = "SELECT rv FROM RotaVersao rv WHERE rv.status = 3 AND rv.rota.id = :idRota AND rv.dataDesativacao = (SELECT MAX(rv.dataDesativacao) FROM RotaVersao as rvv)"),
		@NamedQuery(name = RotaVersao.QUERY_BUSCA_VERSOES, query = "SELECT rv FROM RotaVersao rv WHERE rv.rota.id = :idRota") })
public class RotaVersao implements Serializable, Comparable<RotaVersao> {

	/**
	 * Serial UID.
	 */
	private static final long serialVersionUID = 2527044665484396417L;
	
	/**
	 * Query que busca versão ativa ou em edição.
	 */
	public static final String QUERY_BUSCA_VERSAO_ATIVA_OU_EM_EDICAO = "buscaVersaoAtivaOuEmEdicao";
	
	/**
	 * Query que busca versão ativa ou em edição.
	 */
	public static final String QUERY_BUSCA_VERSAO_ATIVA_E_EM_EDICAO = "buscaVersaoAtivaEEmEdicao";
	
	/**
	 * Query que busca versão ativa ou desativada.
	 */
	public static final String QUERY_BUSCA_VERSAO_ATIVA_OU_DESATIVADA = "buscaVersaoAtivaOuDesativada";
	
	/**
	 * Query que busca versão ativa.
	 */
	public static final String QUERY_BUSCA_VERSAO_ATIVA = "buscaVersaoAtiva";
	
	/**
	 * Query que busca versão ativa.
	 */
	public static final String QUERY_LISTAR_VERSOES_ATIVAS = "listarVersoesAtivas";
	
	/**
	 * Query que busca versão em edição.
	 */
	public static final String QUERY_BUSCA_VERSAO_EM_EDICAO = "buscaVersaoEmEdicao";
	
	/**
	 * Query que busca versão desativada.
	 */
	public static final String QUERY_BUSCA_VERSAO_DESATIVADA = "buscaVersaoDesativada";
	
	/**
	 * Query que busca versões.
	 */
	public static final String QUERY_BUSCA_VERSOES = "buscaVersoes";

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_ROTA_VERSAO")
	@Column(name = "SEQ_ROTA_VERSAO")
	private Long id;

	@ManyToOne(cascade = { CascadeType.MERGE, CascadeType.REFRESH })
	@JoinColumn(name = "SEQ_ROTA")
	private Rota rota;

	@NotNull
	@Column(name = "STA_VERSAO_ROTA", length = 1)
	private Integer status;

	@Column(name = "TXT_OBSERVACAO_VERSAO", length = 300)
	private String observacao;
	
	@Column(name = "DAT_DESATIVACAO")
	@Temporal(TemporalType.TIMESTAMP)
	private Date dataDesativacao;
	
	@NotNull
	@Column(name = "NUM_DURACAO_CICLO", length = 3)
	private Integer duracao;
	
    @ManyToMany(fetch = FetchType.LAZY, cascade = { CascadeType.MERGE, CascadeType.PERSIST, CascadeType.DETACH, CascadeType.REFRESH })
	@JoinTable(name = "ROTA_VERSAO_POSTO", 
		joinColumns = { @JoinColumn(name = "SEQ_ROTA_VISITA_VERSAO", referencedColumnName = "SEQ_ROTA_VERSAO") }, 
		inverseJoinColumns = { @JoinColumn(name = "SEQ_POSTO_COMBUSTIVEL", referencedColumnName = "SEQ_POSTO_COMBUSTIVEL") }
	    , uniqueConstraints = {@UniqueConstraint(columnNames={"SEQ_ROTA_VISITA_VERSAO","SEQ_POSTO_COMBUSTIVEL"})},schema="PROJECT")
	private List<PostoCombustivel> postoCombustiveis;

	/**
	 * Construtor com padrão.
	 * 
	 */
	public RotaVersao() {}

	/**
	 * Construtor com parametros.
	 * 
	 * @param rota
	 * @param status
	 * @param observacao
	 * @param dataDesativacao
	 * @param duracao
	 */
	public RotaVersao(Rota rota, Integer status, String observacao, Date dataDesativacao, Integer duracao) {
		this.rota = rota;
		this.status = status;
		this.observacao = observacao;
		this.dataDesativacao = dataDesativacao;
		this.duracao = duracao;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		RotaVersao other = (RotaVersao) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id
	 *            the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the rota
	 */
	public Rota getRota() {
		return rota;
	}

	/**
	 * @param rota
	 *            the rota to set
	 */
	public void setRota(Rota rota) {
		this.rota = rota;
	}

	/**
	 * @return the status
	 */
	public Integer getStatus() {
		return status;
	}

	/**
	 * @param status
	 *            the status to set
	 */
	public void setStatus(Integer status) {
		this.status = status;
	}

	/**
	 * @return the observacao
	 */
	public String getObservacao() {
		return observacao;
	}

	/**
	 * @param observacao
	 *            the observacao to set
	 */
	public void setObservacao(String observacao) {
		this.observacao = observacao;
	}

	/**
	 * @return the postoCombustiveis
	 */
	public List<PostoCombustivel> getPostoCombustiveis() {
		return postoCombustiveis;
	}

	/**
	 * @param postoCombustiveis
	 *            the postoCombustiveis to set
	 */
	public void setPostoCombustiveis(List<PostoCombustivel> postoCombustiveis) {
		this.postoCombustiveis = postoCombustiveis;
	}

	/**
	 * @return the dataDesativacao
	 */
	public Date getDataDesativacao() {
		return dataDesativacao;
	}

	/**
	 * @param dataDesativacao 
	 * 				the dataDesativacao to set
	 */
	public void setDataDesativacao(Date dataDesativacao) {
		this.dataDesativacao = dataDesativacao;
	}

	/**
	 * @return the duracao
	 */
	public Integer getDuracao() {
		return duracao;
	}

	/**
	 * @param duracao 
	 * 				the duracao to set
	 */
	public void setDuracao(Integer duracao) {
		this.duracao = duracao;
	}

	/**
	 * Método que é ultilizado para mostrar os status, da versão
	 * na tabela lista de rotas.
	 * 
	 * @param versao
	 */
	@Override
	public int compareTo(RotaVersao versao) {
		if (this.status == ((RotaVersao) versao).status)
            return 0;
        else if ((this.status) > ((RotaVersao) versao).status)
            return 1;
        else
            return -1;
	}

	@Override
	public String toString() {
		return "RotaVersao [id=" + id + ", rota=" + rota + ", status=" + status
				+ ", observacao=" + observacao + ", dataDesativacao="
				+ dataDesativacao + ", duracao=" + duracao
				+ ", postoCombustiveis=" + postoCombustiveis.size() + "]";
	}
	
	
}