package br.gov.ce.sefaz.project.manager.impl;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;

import br.gov.ce.sefaz.project.entities.Usuario;
import br.gov.ce.sefaz.project.manager.UsuarioManager;
import br.gov.ce.sefaz.project.manager.exception.BusinessException;

@Stateless
public class UsuarioManagerBean extends GenericoManagerBean<Usuario> implements UsuarioManager {

	/**
	 * 
	 */
	private static final long serialVersionUID = 9097552051222245731L;
	
	private static final Logger LOG = Logger.getLogger(UsuarioManagerBean.class);

	private static final int NUMERO_MAXIMO_RETORNADO_QUERY_AUTOCOMPLETE = 20;
	
	// METODOS PUBLICOS
	
	/**
	 * Método que busca usuários com matrícula que contenham, como prefixo, a matrícula passada como parâmetro.
	 * 
	 * @param matricula do usuário
	 * 
	 * @return List<Usuario>
	 */
	@Override
	public List<Usuario> obterUsuariosPorMatriculaOuNome(final String paramBusca) {
		final String LIKE = "%";
		TypedQuery<Usuario> query = getEntityManager().createNamedQuery(Usuario.QUERY_BUSCAR_USUARIOS_POR_MATRICULA, Usuario.class);
		query.setParameter("param", (paramBusca != null ? paramBusca.toUpperCase() : "") + LIKE);
		query.setParameter("param",LIKE+ (paramBusca != null ? paramBusca.toUpperCase() : "") + LIKE);
		query.setMaxResults(NUMERO_MAXIMO_RETORNADO_QUERY_AUTOCOMPLETE);
		return query.getResultList();
	}
	
	
	/**
	 * Método que busca na base de dados usuário que, possuí matrícula E nome, iguais a matrícula E nome passados como parâmetro.
	 * 
	 * @param matricula do usuário
	 * @param nome do usuário
	 * 
	 * @return Usuario
	 * @throws BusinessException 
	 */
	@Override
	public Usuario obterUsuarioPorMatriculaNome(String matricula, String nome) throws BusinessException {
		try {
			TypedQuery<Usuario> query = getEntityManager().createNamedQuery(Usuario.QUERY_BUSCAR_USUARIO_POR_MATRICULA_NOME, Usuario.class);
			query.setParameter("matricula", (matricula != null? matricula:""));
			query.setParameter("nome", (nome!=null? nome.toUpperCase().trim():""));
			return query.getSingleResult();
		} catch (NoResultException e) {
			throw new BusinessException("mensagem.usuario.nao.existe");
		}		
	}
	
	
	/**
	 * Método que busca na base de dados usuário que, possuí matrícula OU nome, iguais a matrícula OU nome passados como parâmetro.
	 * 
	 * @param matricula ou nome do usuário
	 * 
	 * @return Usuario
	 * @throws BusinessException 
	 */
	@Override
	public Usuario obterUsuarioPorMatriculaOuNome(String paramBusca) throws BusinessException {
		try {
			TypedQuery<Usuario> query = getEntityManager().createNamedQuery(Usuario.QUERY_BUSCAR_USUARIO_POR_MATRICULA_OU_NOME, Usuario.class);
			query.setParameter("matricula", (paramBusca != null? paramBusca:""));
			query.setParameter("nome", (paramBusca!=null? paramBusca.toUpperCase().trim():""));
			return query.getSingleResult();
		} catch (NoResultException e) {
			throw new BusinessException("mensagem.usuario.nao.existe");
		}		
	}
	
	/**
	 * Método que valida o objeto usuario.
	 * 
	 * @param usuario
	 * @throws BusinessException
	 */	
	@Override
	public void validarUsuario(Usuario usuario) throws BusinessException {
		this.validarCamposUsuario(usuario);
		this.validarUsuarioExiste(usuario);
	}

	/**
	 * Método que valida se o objeto usuario não é nulo e se seus campos estão preenchidos.
	 * 
	 * @param usuario
	 * @throws BusinessException
	 */	
	@Override
	public void validarCamposUsuario(Usuario usuario) throws BusinessException {
		if( usuario == null || usuario.getMatricula() == null || usuario.getNome() == null){
			throw new BusinessException("mensagem.usuario.nao.informado");
		}
	}

	/**
	 * Método que verifica se o usuário existe na base de dados, se não, lança exceção.
	 * 
	 * @throws BusinessException
	 */
	@Override
	public void validarUsuarioExiste(Usuario usuario) throws BusinessException {
		final String matriculaUsuario = usuario.getMatricula();
		final String nomeUsuario = usuario.getNome();
		final boolean usuarioExiste = matriculaUsuario != null && nomeUsuario != null && obterUsuarioPorMatriculaNome(matriculaUsuario, nomeUsuario) != null;
		
		if( !usuarioExiste ){
			throw new BusinessException("mensagem.usuario.nao.existe");
		}
	}
}
