	package br.com.devnagui.project.manager.visita.manter;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.inject.util.PropertyAccess;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.entities.CombustivelVisita;
import br.com.devnagui.project.entities.LeituraEncerrante;
import br.com.devnagui.project.entities.MedicaoTanque;
import br.com.devnagui.project.entities.NFEEntrada;
import br.com.devnagui.project.entities.ProdutoCombustivel;
import br.com.devnagui.project.entities.Roteiro;
import br.com.devnagui.project.entities.Visita;
import br.com.devnagui.project.enums.SituacaoVisita;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.BicoManagerBean;
import br.com.devnagui.project.manager.impl.CombustivelVisitaManagerBean;
import br.com.devnagui.project.manager.impl.NotaFiscalEletronicaManagerBean;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;
import br.com.devnagui.project.manager.impl.TanqueManagerBean;
import br.com.devnagui.project.manager.impl.VisitaManagerBean;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoBicoStrategyImpl;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoNotaFiscalStrategyImpl;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoTanqueStrategyImpl;
import br.com.devnagui.project.vo.MedicaoBicoVO;
import br.com.devnagui.project.vo.MedicaoTanqueVO;
import br.com.devnagui.project.vo.MedicoesVisitaVO;
import br.com.devnagui.project.webservices.consultanfe.adapter.NFEAdapter;

@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class VisitaManagerBeanTest {
	
	private static final Logger LOG = Logger.getLogger(VisitaManagerBeanTest.class);

	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManagerBean;
	
	private static final String INSERIR_COMBUSTIVEL_VISITA = "inserirCombustivelVisita.xml";
	
	private static final String INSERIR_VISITA = "inserirVisita.xml";
	
	private static final String INSERIR_VISITA2 = "inserirVisita2.xml";
	
	private static final String INSERIR_VISITA3 = "inserirVisita3.xml";
	
	private static final String INSERIR_MEDICAO_TANQUE = "inserirMedicaoTanque.xml";
	
	private static final String INSERIR_MEDICAO_TANQUE2 = "inserirMedicaoTanque2.xml";
	
	private static final String INSERIR_MEDICAO_TANQUE3 = "inserirMedicaoTanque3.xml";
	
	private static final String INSERIR_MEDICAO_BICO = "inserirMedicaoBico.xml";
	
	private static final String INSERIR_MEDICAO_BICO2 = "inserirMedicaoBico2.xml";
	
	private static final String INSERIR_MEDICAO_BICO3 = "inserirMedicaoBico3.xml";
	
	private static final String INSERIR_MEDICAO_NFE = "inserirMedicaoNFE.xml";
	
	private static final String INSERIR_MEDICAO_NFE2 = "inserirMedicaoNFE2.xml";
	
	private static final String INSERIR_MEDICAO_NFE3 = "inserirMedicaoNFE3.xml";
	
	private static final String INSERIR_ITEM_NFE = "inserirItemNotaFiscal.xml";
	
	private static final String INSERIR_ITEM_NFE2 = "inserirItemNotaFiscal2.xml";
	
	private static final String INSERIR_ITEM_NFE3 = "inserirItemNotaFiscal3.xml";
	
	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;
	
	@TestedObject
	private VisitaManagerBean visitaManagerBean;
	
	@TestedObject
	@InjectIntoByType(target="visitaManagerBean")
	private CombustivelVisitaManagerBean combustivelVisitaManagerBean;
	//--------------------------------------------------- BICO INJECT GROUP------------------------------------------------------------------------

	@InjectIntoByType(target="visitaManagerBean",propertyAccess=PropertyAccess.SETTER)
	private VisitaMedicaoBicoStrategyImpl medicaoBicoStrategyImpl = new VisitaMedicaoBicoStrategyImpl();
	
	@TestedObject
	@InjectIntoByType(target="medicaoBicoStrategyImpl")
	private VisitaManagerBean visitaManagerBean4InjectBico;
	
	@TestedObject
	@InjectIntoByType(target="medicaoBicoStrategyImpl")
	private BicoManagerBean bicoManagerBean4InjectBico;
	
	//----------------------------------------------NOTA FISCAL INJECT GROUP------------------------------------------------------------------------
	@InjectIntoByType(target="visitaManagerBean",propertyAccess=PropertyAccess.SETTER)
	private VisitaMedicaoNotaFiscalStrategyImpl medicaoNotaFiscalStrategyImpl = new VisitaMedicaoNotaFiscalStrategyImpl();

	@TestedObject
	@InjectIntoByType(target="medicaoNotaFiscalStrategyImpl")
	private NotaFiscalEletronicaManagerBean notaFiscalEletronicaManagerBean;
	
	@TestedObject
	@InjectIntoByType(target="medicaoNotaFiscalStrategyImpl",propertyAccess=PropertyAccess.FIELD)
	private VisitaManagerBean visitaManagerBean4InjectNota;
	
	//----------------------------------------------TANQUE INJECT GROUP------------------------------------------------------------------------
	
	@InjectIntoByType(target="visitaManagerBean",propertyAccess=PropertyAccess.SETTER)
	private VisitaMedicaoTanqueStrategyImpl medicaoTanqueStrategyImpl = new VisitaMedicaoTanqueStrategyImpl();

	@TestedObject
	@InjectIntoByType(target="medicaoTanqueStrategyImpl")
	private VisitaManagerBean visitaManagerBean4InjectTanque;
	
	@TestedObject
	@InjectIntoByType(target="medicaoTanqueStrategyImpl")
	private TanqueManagerBean tanqueManagerBean;
	

	//---------------------------------------------TESTES------------------------------------------------------------------------

	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testBuscarVisitasPorPostoCombustivel() {
		LOG.info("Consultando visitas para o posto de id =" + -99L + ".");
		List<Visita> visitas = visitaManagerBean.buscarVisitasPorIdPostoCombustivel(-99L);
		Assert.assertTrue(visitas.size() > 0);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_TANQUE }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testMontarMedicoesAnterioresPorTanque() throws BusinessException {
		LOG.info("Consultando todos os produtos combustiveis");
		TypedQuery<ProdutoCombustivel> query = entityManager.createQuery("Select pc from ProdutoCombustivel pc ", ProdutoCombustivel.class);
	    Set<Long> tiposCombustiveis = new HashSet<Long>();
	    for(ProdutoCombustivel produtoCombustivel : query.getResultList()) {
	    	tiposCombustiveis.add(produtoCombustivel.getId());
	    }
	    LOG.info("Consultando todas as medicoes de tanque");
	    MedicaoTanque medicaoTanque = entityManager.createQuery("Select mt from MedicaoTanque mt order by mt.id desc", MedicaoTanque.class).getResultList().iterator().next();
		List<MedicaoTanqueVO> medicaoTanqueVOs = visitaManagerBean.montarMedicoesComInformacoesAnterioresPorTanque(medicaoTanque.getVisita(), tiposCombustiveis);
		Assert.assertTrue(medicaoTanqueVOs.size() > 0);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_BICO }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testMontarMedicoesAnterioresPorBico() throws BusinessException {
		LOG.info("Consultando todos os produtos combustiveis");
		TypedQuery<ProdutoCombustivel> query = entityManager.createQuery("Select pc from ProdutoCombustivel pc ", ProdutoCombustivel.class);
	    Set<Long> tiposCombustiveis = new HashSet<Long>();
	    for(ProdutoCombustivel produtoCombustivel : query.getResultList()) {
	    	tiposCombustiveis.add(produtoCombustivel.getId());
	    }
	    LOG.info("Consultando todas as medicoes por bico");
		LeituraEncerrante leituraEncerrante = entityManager.createQuery("Select le from LeituraEncerrante le order by le.id desc", LeituraEncerrante.class).getResultList().iterator().next();
		List<MedicaoBicoVO> medicaoBicoVOs = visitaManagerBean.montarMedicoesComInformacoesAnterioresPorBico(leituraEncerrante.getVisita(), tiposCombustiveis);
		Assert.assertTrue(medicaoBicoVOs.size() > 0);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_TANQUE, INSERIR_MEDICAO_TANQUE2 }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testBuscarMedicoesAnterioresPorTanque() {
		LOG.info("Consultando todas as medicoes por tantque e setando a primeira");
		MedicaoTanque medicaoTanque = entityManager.createQuery("Select mt from MedicaoTanque mt order by mt.id desc", MedicaoTanque.class).getResultList().iterator().next();
		LOG.info("Buscando e montando medicaoTanqueVO pela medicaoTanque de id = " + medicaoTanque.getId());
		MedicaoTanqueVO buscarMedicaoAnteriorPorTanque = visitaManagerBean.buscarMedicaoAnteriorPorTanque(medicaoTanque.getId(), medicaoTanque.getVisita().getId());
		Assert.assertTrue(buscarMedicaoAnteriorPorTanque == null);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_BICO, INSERIR_MEDICAO_BICO2 }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testBuscarMedioesAnterioresPorBico() {
		LOG.info("Consultando todoas as medicoes por bico e sentando a primeira");
		LeituraEncerrante leituraEncerrante = entityManager.createQuery("Select le from LeituraEncerrante le order by le.id desc", LeituraEncerrante.class).getResultList().iterator().next();
		LOG.info("Consutlando e montando MedicaoBicoVO pela medicao de id = " + leituraEncerrante.getId());
		MedicaoBicoVO buscarMedicaoAnteriorPorBico = visitaManagerBean.buscarMedicaoAnteriorPorBico(leituraEncerrante.getId(), leituraEncerrante.getVisita().getId());
		Assert.assertTrue(buscarMedicaoAnteriorPorBico == null);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_NFE, INSERIR_ITEM_NFE, INSERIR_MEDICAO_NFE2, INSERIR_ITEM_NFE2}, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testBuscarMedicoesAnterioresPorNfe() {
		LOG.info("Consultando todas as NFE e setando a primeira");
		NFEEntrada nfeEntrada = entityManager.createQuery("Select nfe from NFEEntrada nfe order by nfe.id asc", NFEEntrada.class).getResultList().iterator().next();
		LOG.info("Consultando e montando NFEAdapter pela NFE de id = " + nfeEntrada.getId());
		NFEAdapter buscarMedicaoAnteriorPorNfe = visitaManagerBean.buscarMedicaoAnteriorPorNfe(nfeEntrada.getId(), nfeEntrada.getItensInformados().iterator().next().getVisita().getId());
		Assert.assertTrue(buscarMedicaoAnteriorPorNfe == null);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testObeterMedicoesAnterioresPorVisita() {
		LOG.info("Consultando todas as visitas e setando a primeira");  
		Visita visitaConsulta = entityManager.createQuery("Select v from Visita v order by v.id desc", Visita.class).getResultList().iterator().next();
		LOG.info("Consultando todas as medicoes (Medicoes por tanque, medicoes por bico e todas as NFEs)");
		MedicoesVisitaVO medicoesVistaVO = visitaManagerBean.obterMedicoesPorVisita(visitaConsulta.getId());
		Assert.assertTrue(medicoesVistaVO != null);
	}
	
	@Test
	public void testSalvarVisita() { 
		LOG.info("Inciando teste de salvar visita");
		Visita visita = new Visita();
		visita.setDataVisita(new Date());
		visita.setDescParecer("test");
		visita.setSituacaoVisita(SituacaoVisita.ABERTA);
		LOG.info("Consultando todos os roteiro e setando o primeiro");
		visita.setRoteiro(entityManager.createQuery("Select r from Roteiro r", Roteiro.class).getResultList().iterator().next());
		try {
			visitaManagerBean.salvar(visita);
		} catch (BusinessException e) {
			LOG.error("Erro ao salvar uma visita",e);
		}
	}
	
	@Test
	public void testAlterarVisita() {
		LOG.info("Consultando todas as visitas e sentando a primeira");
		Visita visita = entityManager.createQuery("Select v from Visita v order by v.id desc", Visita.class).getResultList().iterator().next();
		LOG.info("Consultando todas as medicoes que houve na visita");
		MedicoesVisitaVO medicoesVistaVO = visitaManagerBean.obterMedicoesPorVisita(visita.getId());
		visita.setMedicoesTanque(medicoesVistaVO.getMedicoesTanque());
		visita.setLeituraEncerrantes(medicoesVistaVO.getMedicoesBico());
		visita.setItensDaNotaFiscal(medicoesVistaVO.getItensNotaFiscal());
		try {
			visitaManagerBean.salvar(visita);
		} catch (BusinessException e) {
			LOG.error("Erro ao alterar uma visita", e);
		}
	}
	
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_VISITA2, INSERIR_VISITA3 }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testIsPossivelAlterarVisita() {
		LOG.info("Consultando visita de id = 2");
		Visita visita = entityManager.createQuery("Select v from Visita v where v.id = 2", Visita.class).getSingleResult();
		LOG.info("Verificando se e possivel alterar a visita");
		Assert.assertTrue(visitaManagerBean.isPossivelAlterarExcluirVisita(visita));
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_TANQUE, INSERIR_MEDICAO_BICO, INSERIR_MEDICAO_NFE }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testConcluirMedicao() {
		LOG.info("Consultando visita de id = 1");
		Visita visita = entityManager.createQuery("Select v from Visita v where v.id = 1", Visita.class).getSingleResult();
		LOG.info("Consultando todas as medicoes da visita");
		MedicoesVisitaVO medicoesVistaVO = visitaManagerBean.obterMedicoesPorVisita(visita.getId());
		visita.setMedicoesTanque(medicoesVistaVO.getMedicoesTanque());
		visita.setLeituraEncerrantes(medicoesVistaVO.getMedicoesBico());
		visita.setItensDaNotaFiscal(medicoesVistaVO.getItensNotaFiscal());
		List<ProdutoCombustivel> produtoCombustiveis = new ArrayList<ProdutoCombustivel>();
		
		for(MedicaoTanque medicaoTanque:visita.getMedicoesTanque()){
			produtoCombustiveis.add(medicaoTanque.getTanque().getProdutoCombustivel());
		}
		try {
			LOG.info("Concluindo medicoes para a visita");
			visitaManagerBean.concluirMedicoes(visita, produtoCombustiveis, false);
		} catch (BusinessException e) {
			LOG.error("Error ao concluir uma medicao",e);
			Assert.fail();
		}
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testSalvarCombustivelVisita() throws BusinessException {
		LOG.info("Consultando todos os produtos combustiveis");
		TypedQuery<ProdutoCombustivel> query = entityManager.createQuery("Select pc from ProdutoCombustivel pc ", ProdutoCombustivel.class);
		CombustivelVisita combustivelVisita = new CombustivelVisita();
		combustivelVisita.setDataRegistro(new Date());
		combustivelVisita.setValor(12.0);
		LOG.info("Consultando visita de id = 1");
		combustivelVisita.setVisita(entityManager.createQuery("Select v from Visita v where v.id = 1", Visita.class).getSingleResult());
		combustivelVisita.setProdutoCombustivel(query.getResultList().iterator().next());
		List<CombustivelVisita> combustiveisVisita = new ArrayList<CombustivelVisita>();
		combustiveisVisita.add(combustivelVisita);
		
		LOG.info("Salvando combustivel visita");
		try {
			visitaManagerBean.salvarCombustivelVisita(combustivelVisita.getVisita(), combustiveisVisita);
			
		} catch (BusinessException e) {
			LOG.error("Erro ao salvar uma visita", e);
			Assert.fail();
		}
		combustivelVisitaManagerBean.excluir(combustivelVisita);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_COMBUSTIVEL_VISITA }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testBuscarCombustivelVisitaPorIdVisita() {
		List<CombustivelVisita> combustiveisVisita = combustivelVisitaManagerBean.buscarCombustivelVisitaPorIdVisita(1L);
		Assert.assertTrue(combustiveisVisita.size() > 0);
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_VISITA3, INSERIR_MEDICAO_TANQUE, INSERIR_MEDICAO_TANQUE3, INSERIR_MEDICAO_BICO, INSERIR_MEDICAO_BICO3, INSERIR_MEDICAO_NFE, INSERIR_MEDICAO_NFE2, INSERIR_MEDICAO_NFE3 , INSERIR_ITEM_NFE3 }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testCalculoConformidade() {
		LOG.info("Consultando visita de id = 1");
		Visita visita = entityManager.createQuery("Select v from Visita v where v.id = 2", Visita.class).getSingleResult();
		LOG.info("Consultando todas as medicoes da visita");
		MedicoesVisitaVO medicoesVistaVO = visitaManagerBean.obterMedicoesPorVisita(visita.getId());
		visita.setMedicoesTanque(medicoesVistaVO.getMedicoesTanque());
		visita.setLeituraEncerrantes(medicoesVistaVO.getMedicoesBico());
		visita.setItensDaNotaFiscal(medicoesVistaVO.getItensNotaFiscal());
		
		List<ProdutoCombustivel> produtoCombustiveis = new ArrayList<ProdutoCombustivel>();
		
        for(MedicaoTanque medicaoTanque:visita.getMedicoesTanque()){
       	 produtoCombustiveis.add(medicaoTanque.getTanque().getProdutoCombustivel());
       }
        
        try {
			visitaManagerBean.concluirMedicoes(visita, produtoCombustiveis, true);
		} catch (BusinessException e) {
			Assert.fail();
		}
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_TANQUE, INSERIR_MEDICAO_TANQUE2, INSERIR_MEDICAO_BICO, INSERIR_MEDICAO_BICO2, INSERIR_MEDICAO_NFE, INSERIR_MEDICAO_NFE2, INSERIR_ITEM_NFE2 }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testSalvarMedicoes() throws BusinessException {
		LOG.info("Consultando visita de id = 1");
		Visita visita = entityManager.createQuery("Select v from Visita v where v.id = 1", Visita.class).getSingleResult();
		LOG.info("Consultando todas as medicoes da visita");
		MedicoesVisitaVO medicoesVistaVO = visitaManagerBean.obterMedicoesPorVisita(visita.getId());
		visita.setMedicoesTanque(medicoesVistaVO.getMedicoesTanque());
		visita.setLeituraEncerrantes(medicoesVistaVO.getMedicoesBico());
		visita.setItensDaNotaFiscal(medicoesVistaVO.getItensNotaFiscal());
		List<MedicaoTanqueVO> medicoesPorTanque = new ArrayList<MedicaoTanqueVO>();
		List<MedicaoBicoVO> medicoesPorBico = new ArrayList<MedicaoBicoVO>();
		
		List<ProdutoCombustivel> produtoCombustiveis = new ArrayList<ProdutoCombustivel>();
		
        for(MedicaoTanque medicaoTanque:visita.getMedicoesTanque()){
       	 produtoCombustiveis.add(medicaoTanque.getTanque().getProdutoCombustivel());
       }
        
        LOG.info("Construindo medicaoTanqueVO");
        for (MedicaoTanque medicaoTanque : visita.getMedicoesTanque()) {
            MedicaoTanqueVO medicaoTanqueVOAtual  = visitaManagerBean.buscarMedicaoAnteriorPorTanque(medicaoTanque.getTanque().getId(), visita.getId());
            if(medicaoTanqueVOAtual == null) {
                medicaoTanqueVOAtual = new MedicaoTanqueVO();
            }
            medicaoTanqueVOAtual.setTanque(medicaoTanque.getTanque());
            medicaoTanqueVOAtual.setMedicaoTanqueAtual(medicaoTanque);
            medicoesPorTanque.add(medicaoTanqueVOAtual);
        }
    
        LOG.info("Constuindo MedicaoVisitaVO");
        for (LeituraEncerrante leituraEncerrante : visita.getLeituraEncerrantes()) {
            MedicaoBicoVO medicaoBicoVOAtual = visitaManagerBean.buscarMedicaoAnteriorPorBico(leituraEncerrante.getBico().getId(), visita.getId());
            if(medicaoBicoVOAtual == null) {
                medicaoBicoVOAtual = new MedicaoBicoVO();
            }
            medicaoBicoVOAtual.setBico(leituraEncerrante.getBico());
            medicaoBicoVOAtual.setLeituraEncerranteAtual(leituraEncerrante);
            medicoesPorBico.add(medicaoBicoVOAtual);
        }
        try {
        	LOG.info("Salvando medicaoBico");
        	visitaManagerBean.salvarMedicoesBicos(visita, medicoesPorBico);
        	LOG.info("salvando medicaoTanque");
        	visitaManagerBean.salvarMedicoesTanques(visita, medicoesPorTanque);
		} catch (BusinessException e) {
			LOG.error("Erro ao salvar", e);
			Assert.fail();
		}
        
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_TANQUE, INSERIR_MEDICAO_TANQUE2, INSERIR_MEDICAO_BICO, INSERIR_MEDICAO_BICO2, INSERIR_MEDICAO_NFE, INSERIR_MEDICAO_NFE2, INSERIR_ITEM_NFE2 }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testRemoverMedicoes() throws BusinessException {
		LOG.info("Consultando visita de id = 1");
		Visita visita = entityManager.createQuery("Select v from Visita v where v.id = 1", Visita.class).getSingleResult();
		LOG.info("Consultando medicoes da visita");
		MedicoesVisitaVO medicoesVistaVO = visitaManagerBean.obterMedicoesPorVisita(visita.getId());
		visita.setMedicoesTanque(medicoesVistaVO.getMedicoesTanque());
		visita.setLeituraEncerrantes(medicoesVistaVO.getMedicoesBico());
		visita.setItensDaNotaFiscal(medicoesVistaVO.getItensNotaFiscal());
		List<MedicaoTanqueVO> medicoesPorTanque = new ArrayList<MedicaoTanqueVO>();
		List<MedicaoBicoVO> medicoesPorBico = new ArrayList<MedicaoBicoVO>();
		List<NFEAdapter> nfeServicos = new ArrayList<NFEAdapter>();
		
		List<ProdutoCombustivel> produtoCombustiveis = new ArrayList<ProdutoCombustivel>();
		
        for(MedicaoTanque medicaoTanque:visita.getMedicoesTanque()){
       	 produtoCombustiveis.add(medicaoTanque.getTanque().getProdutoCombustivel());
       }
        
        LOG.info("Construindo medicaoTanqueVO");
        for (MedicaoTanque medicaoTanque : visita.getMedicoesTanque()) {
            MedicaoTanqueVO medicaoTanqueVOAtual  = visitaManagerBean.buscarMedicaoAnteriorPorTanque(medicaoTanque.getTanque().getId(), visita.getId());
            if(medicaoTanqueVOAtual == null) {
                medicaoTanqueVOAtual = new MedicaoTanqueVO();
            }
            medicaoTanqueVOAtual.setTanque(medicaoTanque.getTanque());
            medicaoTanqueVOAtual.setMedicaoTanqueAtual(medicaoTanque);
            medicoesPorTanque.add(medicaoTanqueVOAtual);
        }
    
        for (LeituraEncerrante leituraEncerrante : visita.getLeituraEncerrantes()) {
        	LOG.info("Construindo medicaoBicoVO");
            MedicaoBicoVO medicaoBicoVOAtual = visitaManagerBean.buscarMedicaoAnteriorPorBico(leituraEncerrante.getBico().getId(), visita.getId());
            if(medicaoBicoVOAtual == null) {
                medicaoBicoVOAtual = new MedicaoBicoVO();
            }
            medicaoBicoVOAtual.setBico(leituraEncerrante.getBico());
            medicaoBicoVOAtual.setLeituraEncerranteAtual(leituraEncerrante);
            medicoesPorBico.add(medicaoBicoVOAtual);
        }
        
        LOG.info("Removendo medicao por combustivel");
        try {
        	visitaManagerBean.removerMedicoesPorCombustivel(visita, produtoCombustiveis, medicoesPorTanque, medicoesPorBico, nfeServicos);
			
		} catch (Exception e) {
			LOG.error("Erro ao remover os combustiveis", e);
			Assert.fail();
		}
	}
	
	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA, INSERIR_MEDICAO_BICO }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testIsPrimeiraVisia() throws BusinessException {
		Visita visita = entityManager.createQuery("Select v from Visita v order by v.id asc", Visita.class).getResultList().iterator().next();
		Assert.assertFalse(visitaManagerBean.isPrimeiraVisita(visita.getId(), visita.getPostoCombustivel().getId()));
	}
}
