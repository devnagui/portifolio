package br.com.devnagui.project.manager.impl;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;

import br.com.devnagui.project.entities.Contribuinte;
import br.com.devnagui.project.manager.ContribuinteManager;

@Stateless
public class ContribuinteManagerBean extends GenericoManagerBean<Contribuinte> implements ContribuinteManager {
	private static final Logger LOG = Logger.getLogger(ContribuinteManagerBean.class);

	/**
	 * 
	 */
	@SuppressWarnings("unused")
	private static final Long COD_CAEN_CONTRIBUINTE_POSTO = 4731800l;
	private static final long serialVersionUID = 1L;

	/**
	 * Pode haver mais de um no caso de contribuintes com situacao...
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<Contribuinte> buscarContribuinteAtivoPorCnpj(Long cnpj) {
		Query query = getEntityManager().createNamedQuery("buscaContribuintePorCNPJ");
		query.setParameter("cnpj", cnpj);
		query.setMaxResults(10);
		return query.getResultList();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see br.com.devnagui.project.manager.ContribuinteManager#
	 * isContribuinteAtivoNoCadastroSEFAZ(java.lang.Long)
	 */
	@Override
	public boolean isContribuinteSAtivoNoCadastroSEFAZ(String cnpjOuRazao) {
		TypedQuery<Long> query = getEntityManager().createNamedQuery(Contribuinte.QUERY_OBTER_TOTAL_CONTRIBUINTES_ATIVOS_POR_RAZAO_OU_CNPJ,
				Long.class);
		ajustaRazaoECNPJNaQuery(cnpjOuRazao, query);
		Long qtdContribuintesAtivosParaOCNPJ = 0l;
		try {
			qtdContribuintesAtivosParaOCNPJ = query.getSingleResult();
		} catch (NoResultException e) {
			return false;
		}
		return qtdContribuintesAtivosParaOCNPJ > 0;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see br.com.devnagui.project.manager.ContribuinteManager#
	 * obterTotalDeContribuinteDTOPorCnpjOuRazao(java.lang.String)
	 */
	@Override
	public Long obterTotalDeContribuintePorCnpjOuRazao(String cnpjOuRazao) {
		TypedQuery<Long> query = getEntityManager().createNamedQuery(Contribuinte.QUERY_OBTER_TOTAL_CONTRIBUINTES_POR_RAZAO_OU_CNPJ, Long.class);
		ajustaRazaoECNPJNaQuery(cnpjOuRazao, query);
		Long resultado = 0l;
		try {
			resultado = query.getSingleResult();
		} catch (NoResultException e) {
			LOG.error("Não foi encontrado um contribuinte por razao ou cnpj");
		}
		return resultado;
	}

	/**
	 * Metodo padrao para parametrizacao da query de contribuintes por razao ou
	 * cnpj
	 * 
	 * @param cnpjOuRazao
	 * @param query
	 */
	private void ajustaRazaoECNPJNaQuery(String cnpjOuRazao, Query query) {
		query.setParameter("cnpj", cnpjOuRazao + "%");
		query.setParameter("razaoSocial", (cnpjOuRazao != null ? cnpjOuRazao.toUpperCase() : "") + "%");
	}
}
