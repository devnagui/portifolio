package br.com.devnagui.project.manager.impl;

import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;

import br.com.devnagui.project.entities.User;
import br.com.devnagui.project.manager.UserBusiness;
import br.com.devnagui.project.manager.exception.BusinessException;

@Stateless
public class UserBusinessEJB extends GenericBusinessEJB<User> implements UserBusiness {

	/**
	 * uid
	 */
	private static final long serialVersionUID = 9097552051222245731L;
	
	private static final Logger LOG = Logger.getLogger(UserBusinessEJB.class);

	private static final int NUMERO_MAXIMO_RETORNADO_QUERY_AUTOCOMPLETE = 20;
	
	// METODOS PUBLICOS
	
	@Override
	public List<User> getUserByRegistrationNumberOrName(final String paramBusca) {
		final String LIKE = "%";
		TypedQuery<User> query = getEntityManager().createNamedQuery(User.QUERY_BUSCAR_USUARIOS_POR_MATRICULA, User.class);
		query.setParameter("param", (paramBusca != null ? paramBusca.toUpperCase() : "") + LIKE);
		query.setParameter("param",LIKE+ (paramBusca != null ? paramBusca.toUpperCase() : "") + LIKE);
		query.setMaxResults(NUMERO_MAXIMO_RETORNADO_QUERY_AUTOCOMPLETE);
		return query.getResultList();
	}
	
	
	@Override
	public User getUserByRegistrationNumberAndName(String matricula, String nome) throws BusinessException {
		try {
			TypedQuery<User> query = getEntityManager().createNamedQuery(User.QUERY_BUSCAR_USUARIO_POR_MATRICULA_NOME, User.class);
			query.setParameter("matricula", (matricula != null? matricula:""));
			query.setParameter("nome", (nome!=null? nome.toUpperCase().trim():""));
			return query.getSingleResult();
		} catch (NoResultException e) {
			throw new BusinessException("mensagem.usuario.nao.existe");
		}		
	}
	
	
	@Override
	public void validateUser(User usuario) throws BusinessException {
		this.validateUserFields(usuario);
		this.validateIfUserExists(usuario);
	}

	@Override
	public void validateUserFields(User usuario) throws BusinessException {
		if( usuario == null || usuario.getMatricula() == null || usuario.getNome() == null){
			throw new BusinessException("mensagem.usuario.nao.informado");
		}
	}

	@Override
	public void validateIfUserExists(User usuario) throws BusinessException {
		final String matriculaUsuario = usuario.getMatricula();
		final String nomeUsuario = usuario.getNome();
		final boolean usuarioExiste = matriculaUsuario != null && nomeUsuario != null && getUserByRegistrationNumberAndName(matriculaUsuario, nomeUsuario) != null;
		
		if( !usuarioExiste ){
			throw new BusinessException("mensagem.usuario.nao.existe");
		}
	}
}
