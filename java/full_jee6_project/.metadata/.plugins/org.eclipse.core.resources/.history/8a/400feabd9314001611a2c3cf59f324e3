	package br.gov.ce.project.manager.visita.manter;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.inject.util.PropertyAccess;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.entities.ItemNFEEntrada;
import br.com.devnagui.project.entities.NFEEntrada;
import br.com.devnagui.project.entities.Visita;
import br.com.devnagui.project.enums.SituacaoNFE;
import br.com.devnagui.project.manager.GenericoManager;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.GenericoManagerBean;
import br.com.devnagui.project.manager.impl.NotaFiscalEletronicaManagerBean;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;
import br.com.devnagui.project.manager.impl.VisitaManagerBean;
import br.com.devnagui.project.manager.impl.VisitaNfeManagerBean;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoNotaFiscalStrategyImpl;
import br.com.devnagui.project.webservices.consultanfe.adapter.NFEAdapter;
import br.com.devnagui.nfecorp.ws.consultas.nfe.Destinatario;
import br.com.devnagui.nfecorp.ws.consultas.nfe.Emitente;
import br.com.devnagui.nfecorp.ws.consultas.nfe.Icms;
import br.com.devnagui.nfecorp.ws.consultas.nfe.Nfe;
import br.com.devnagui.nfecorp.ws.consultas.nfe.Produto;
import br.com.devnagui.nfecorp.ws.consultas.nfe.ProdutoPK;
import br.com.devnagui.nfecorp.ws.consultas.nfe.RetNfe;

@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class NotaFiscalManagerBeanTest {
	
	private static final Logger LOG = Logger.getLogger(NotaFiscalManagerBeanTest.class);

	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManagerBean;
	
	private static final String INSERIR_VISITA = "inserirVisita.xml";
	
	private static final String INSERIR_MEDICAO_NFE = "inserirMedicaoNFE.xml";
	
	private static final String INSERIR_MEDICAO_NFE2 = "inserirMedicaoNFE2.xml";
	
	private static final String INSERIR_ITEM_NFE = "inserirItemNotaFiscal.xml";
	
	private static final String INSERIR_ITEM_NFE2 = "inserirItemNotaFiscal2.xml";

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;
	
	@TestedObject
	private VisitaManagerBean visitaManagerBean;
	
	
	//----------------------------------------------NOTA FISCAL INJECT GROUP------------------------------------------------------------------------
	@InjectIntoByType(target="visitaManagerBean",propertyAccess=PropertyAccess.SETTER)
	private VisitaMedicaoNotaFiscalStrategyImpl medicaoNotaFiscalStrategyImpl = new VisitaMedicaoNotaFiscalStrategyImpl();

	@TestedObject
	@InjectIntoByType(target="medicaoNotaFiscalStrategyImpl")
	private NotaFiscalEletronicaManagerBean notaFiscalEletronicaManagerBean;
	
	@TestedObject
	@InjectIntoByType(target="notaFiscalEletronicaManagerBean")
    private GenericoManager<ItemNFEEntrada> itemManagerBean = new GenericoManagerBean<ItemNFEEntrada>(entityManager,ItemNFEEntrada.class);
	
	@TestedObject
	@InjectIntoByType(target="medicaoNotaFiscalStrategyImpl",propertyAccess=PropertyAccess.FIELD)
	private VisitaManagerBean visitaManagerBean4InjectNota;
	
	@TestedObject
    @InjectIntoByType(target="notaFiscalEletronicaManagerBean")
	private VisitaNfeManagerBean visitaNFeManager;
	
	//---------------------------------------------TESTES------------------------------------------------------------------------

	@Test
	@DataSet(value = {"../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy=br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testValidarNotaFiscalStatusOK() throws BusinessException, DatatypeConfigurationException {
	    Visita visita = visitaManagerBean.buscar(1l);
	    NFEAdapter nfe = criarNFEAdapterValida(visita.getPostoCombustivel().getContribuinte().getCnpj(),10d,5000,10,100,new Date());
	    notaFiscalEletronicaManagerBean.validarNotaFiscalDoNFECorp(visita, nfe);
	    Assert.assertTrue(SituacaoNFE.OK.equals(nfe.getSituacao()));
	    
	}
	
    @Test
    @DataSet(value = { "../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testValidarNotaFiscalCNPJInvalido() throws BusinessException, DatatypeConfigurationException {
        Visita visita = visitaManagerBean.buscar(1l);
        visitaManagerBean.removerDoContexto(visita);
        NFEAdapter nfe = criarNFEAdapterValida(new Long(visita.getPostoCombustivel().getContribuinte().getCnpj()),10d,5000,10,100,new Date());
        visita.getPostoCombustivel().getContribuinte().setCnpj(Long.valueOf(99999999988l));
        notaFiscalEletronicaManagerBean.validarNotaFiscalDoNFECorp(visita, nfe);
        Assert.assertTrue(SituacaoNFE.DESTINATARIO_NAO_CONFERE.equals(nfe.getSituacao()));

    }
    
    @Test
    @DataSet(value = { "../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testValidarNotaFiscalCodigoProcessamentoInvalido() throws BusinessException, DatatypeConfigurationException {
        Visita visita = visitaManagerBean.buscar(1l);
        visitaManagerBean.removerDoContexto(visita);
        NFEAdapter nfe = criarNFEAdapterValida(visita.getPostoCombustivel().getContribuinte().getCnpj(),10d,5000,10,999,new Date());
        notaFiscalEletronicaManagerBean.validarNotaFiscalDoNFECorp(visita, nfe);
        Assert.assertTrue(SituacaoNFE.NAO_AUTORIZADA.equals(nfe.getSituacao()));

    }
    
    @Test
    @DataSet(value = { "../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testValidarNotaFiscalCFOPInvalido() throws BusinessException, DatatypeConfigurationException {
        Visita visita = visitaManagerBean.buscar(1l);
        visitaManagerBean.removerDoContexto(visita);
        NFEAdapter nfe = criarNFEAdapterValida(visita.getPostoCombustivel().getContribuinte().getCnpj(),10d,4999,10,100,new Date());
        notaFiscalEletronicaManagerBean.validarNotaFiscalDoNFECorp(visita, nfe);
        Assert.assertTrue(SituacaoNFE.CFOP_INVALIDO.equals(nfe.getSituacao()));

    }
    
    @Test
    @DataSet(value = { "../../roteiro/manter/atribuirRoteiro.xml", INSERIR_VISITA }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testValidarNotaFiscalDataEmissaoInvalida() throws BusinessException, DatatypeConfigurationException {
        Visita visita = visitaManagerBean.buscar(1l);
        visitaManagerBean.removerDoContexto(visita);
        visita.getRoteiro().getRotaVersao().setDuracao(1);
        Date date = new Date();
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.MONTH, -1);
        NFEAdapter nfe = criarNFEAdapterValida(visita.getPostoCombustivel().getContribuinte().getCnpj(),10d,5000,10,100,calendar.getTime());
        notaFiscalEletronicaManagerBean.validarNotaFiscalDoNFECorp(visita, nfe);
        Assert.assertTrue(SituacaoNFE.PRAZO_EXPIRADO.equals(nfe.getSituacao()));

    }
    
    @Test
    @DataSet(value = { INSERIR_VISITA,INSERIR_MEDICAO_NFE }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testObterNotaFiscalDoOralcePorChave() throws BusinessException {
        NFEEntrada nfeentrada = notaFiscalEletronicaManagerBean.obterNotaFiscalPorChaveDeAcesso("1");
        Assert.assertNotNull(nfeentrada);

    }
    
    @Test
    @DataSet(value = { INSERIR_VISITA,INSERIR_ITEM_NFE,INSERIR_ITEM_NFE}, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testLimparNotasFiscaisVisita() throws BusinessException {
        notaFiscalEletronicaManagerBean.limparItensDaVisita(1l);
        Visita visita = visitaManagerBean.buscar(1l);
        Assert.assertTrue(visita.getItensDaNotaFiscal().size()==0);

    }
    
    
    @Test
    @DataSet(value = { INSERIR_VISITA,INSERIR_ITEM_NFE,INSERIR_ITEM_NFE}, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testSalvarNotaFiscal() throws BusinessException {
        Visita visita = visitaManagerBean.buscar(1l);
        notaFiscalEletronicaManagerBean.salvarItensComNotaFiscal(visita);
        Assert.assertNotNull(visita);
    }
    
    @Test
    @DataSet(value = { INSERIR_VISITA,INSERIR_ITEM_NFE,INSERIR_ITEM_NFE}, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testChaveInvalidaPorTamanho() throws BusinessException {
        Visita visita = visitaManagerBean.buscar(1l);
    	try {
			notaFiscalEletronicaManagerBean.consultarNFECorpPelaChaveAcesso(visita, "12132131313232132132132121212133212310");
		} catch (BusinessException e) {
			Assert.assertEquals("msg.visita.consultanfe.chaveInvalida", e.getMessage());
		}
    }
    
    @Test
    @DataSet(value = { INSERIR_VISITA,INSERIR_ITEM_NFE,INSERIR_ITEM_NFE}, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testChaveInvalidaPorCaractere() throws BusinessException {
        Visita visita = visitaManagerBean.buscar(1l);
    	try {
			notaFiscalEletronicaManagerBean.consultarNFECorpPelaChaveAcesso(visita, "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
		} catch (BusinessException e) {
			Assert.assertEquals("msg.visita.consultanfe.chaveInvalida", e.getMessage());
		}
    }
    
    @Test
    @DataSet(value = { INSERIR_VISITA,INSERIR_ITEM_NFE,INSERIR_ITEM_NFE}, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
    public void testChaveInvalidaPorNumero() throws BusinessException {
        Visita visita = visitaManagerBean.buscar(1l);
    	try {
			notaFiscalEletronicaManagerBean.consultarNFECorpPelaChaveAcesso(visita, "11111111111111111111111111111111111111111111");
		} catch (BusinessException e) {
			Assert.assertEquals("msg.visita.consultanfe.chaveInvalida", e.getMessage());
		}
    }
    

    //---------------------------------------------METODOS UTILITARIOS DOS TESTES------------------------------------------------------------------------
	  
    private NFEAdapter criarNFEAdapterValida(long cnpj, double qtdProduto, int cfopProduto,double icmsVal,int codigoProcessamentoNFe,Date dataEmissao) throws DatatypeConfigurationException {
        RetNfe nfeServico = new RetNfe();
        Produto produto = new Produto();
        ProdutoPK produtoPK = new ProdutoPK();
        produtoPK.setNumeroItem(1);
        produto.setProdutoPK(produtoPK);
        produto.setQuantidade(qtdProduto);
        produto.setCfop(cfopProduto);
        Icms icms = new Icms();
        icms.setValorIcms(icmsVal);
        produto.setIcms(icms);
        nfeServico.getProdutos().add(produto);
        nfeServico.setNfe(new Nfe());
        nfeServico.getNfe().setEmitente(new Emitente());
        nfeServico.getNfe().getEmitente().setNome("emitente dos testes unitarios");
        nfeServico.getNfe().setChaveAcesso("NFE DOS TESTES UNITARIOS");
        nfeServico.getNfe().setDestinatario(new Destinatario());
        nfeServico.getNfe().getDestinatario().setCnpj(cnpj);
        nfeServico.getNfe().setCodigoResultadoProcessamento(codigoProcessamentoNFe);
        GregorianCalendar gregorianCalendar = new GregorianCalendar();
        gregorianCalendar.setTime(dataEmissao);
        XMLGregorianCalendar xmlGregorianCalendar = null;
        xmlGregorianCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
        nfeServico.getNfe().setDataEmissao(xmlGregorianCalendar);
        NFEAdapter retorno = new NFEAdapter(nfeServico);
        return retorno;
    }
    
}
