package br.com.devnagui.project.manager.impl;

import java.util.List;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Order;
import javax.persistence.criteria.Root;

import org.apache.log4j.Logger;

import br.com.devnagui.project.dto.PaginaDTO;
import br.com.devnagui.project.entities.Rota;
import br.com.devnagui.project.entities.RotaVersao;
import br.com.devnagui.project.enums.StatusRotaVersao;
import br.com.devnagui.project.manager.RotaManager;
import br.com.devnagui.project.manager.RotaVersaoManager;
import br.com.devnagui.project.manager.exception.BusinessException;

/**
 * Criado por @author 006159C0 em 11/03/2013
 * 
 */
@Stateless
public class RotaManagerBean extends GenericManagerBean<Rota> implements RotaManager {

	/**
	 * Serial UID.
	 */
	private static final long serialVersionUID = -6493579600927150528L;

	private static final Logger LOG = Logger.getLogger(RotaManagerBean.class);

	@EJB private RotaVersaoManager rotaVersaoManager;

	/**
	 * Sobrescrevi o m�todo para validar antes de salvar.
	 * 
	 * @param entidade
	 * @throws BusinessException
	 */
	@Override
	public void inserirRotaComRotaVersao(Rota rota, RotaVersao rotaVersao) throws BusinessException {
		// Default � o 2 - Em Edi��o, pois tem que ficar em edi��o.
		rotaVersao.setStatus(StatusRotaVersao.EM_EDICAO.getCodigoSituacao());
		// Default � TRUE pois a rota tem que ficar ativa.
		rota.setStatus(Boolean.TRUE);
		rotaVersao.setRota(rota);
		rota.getVersoes().add(rotaVersao);

		rotaVersaoManager.validarCampos(rotaVersao);
		this.validarCamposInserir(rota);
		super.inserir(rota);
	}

	@Override
	public void excluir(Rota rota) throws BusinessException {
		if(rotaVersaoManager.temVersaoAtivaOuDesativada(rota.getId()))
			throw new BusinessException("mensagem.rota.excluir.error");
		super.excluir(rota);
	}
	
	/**
	 * M�todo que criou um crit�rio para a ordena��o da minha lista pelo nome da Rota.
	 * 
	 * @param builder
	 * @param entidadeRoot
	 */
	@Override
	protected Order construirOrderBy(CriteriaBuilder builder, Root<Rota> entidadeRoot, PaginaDTO<Rota> paginaDTO) {
		return builder.asc(entidadeRoot.get(Rota.NOME_ATRIBUTO));
	}

	/**
	 * M�todo que vai buscar no banco se j� existe o n�mero no banco igual ao
	 * passado como par�metro.
	 * 
	 * @param numero
	 * @return Boolean
	 */
	@Override
	public Boolean isBuscaRotaPeloNumero(Long numero) {
		LOG.info("Obtendo rota pelo n�mero");
		TypedQuery<Rota> query = getEntityManager().createNamedQuery(Rota.QUERY_BUSCA_ROTA_PELO_NUMERO, Rota.class);
		query.setParameter("numero", numero);

		if (!query.getResultList().isEmpty())
			return true;
		else
			return false;
	}

	/**
	 * M�todo que valida todos os campos da rota no inserir.
	 * 
	 * @param rota
	 * @throws BusinessException
	 */
	@Override
	public void validarCamposInserir(Rota rota) throws BusinessException {
		LOG.info("Iniciando valida��o de campos no inserir.");
		this.validarRota(rota);
		this.validarNumeroRepetido(rota.getNumero());
		this.validarNumero(rota.getNumero());
		this.validarNome(rota.getNome());
		this.validarStatus(rota.getStatus());
		this.validarVersoes(rota.getVersoes());
	}
	
	/**
	 * M�todo que valida todos os campos da rota no alterar.
	 * 
	 * @param rota
	 * @throws BusinessException
	 */
	@Override
	public void validarCamposAlterar(Rota rota) throws BusinessException {
		LOG.info("Iniciando valida��o de campos no alterar.");
		this.validarRota(rota);
		this.validarNumero(rota.getNumero());
		this.validarNome(rota.getNome());
		this.validarStatus(rota.getStatus());
		this.validarVersoes(rota.getVersoes());
	}

	/**
	 * M�todo que valida o objeto Rota.
	 * 
	 * @param rota
	 * @throws BusinessException
	 */
	@Override
	public void validarRota(Rota rota) throws BusinessException {
		if(rota == null)
			throw new BusinessException("mensagem.rota.null");
	}
	
	/**
	 * M�todo que v�lida o campo n�mero da rota repetido.
	 * 
	 * @param numero
	 * @throws BusinessException 
	 */
	@Override
	public void validarNumeroRepetido(Long numero) throws BusinessException {
		if(this.isBuscaRotaPeloNumero(numero))
			throw new BusinessException("mensagem.rota.numero.existente");
	}

	/**
	 * M�todo que valida o campo n�mero da rota.
	 * 
	 * @param numero
	 * @throws BusinessException
	 */
	@Override
	public void validarNumero(Long numero) throws BusinessException {
		if (numero == null)
			throw new BusinessException("mensagem.rota.numero.null");
		else if (numero <= 0)
			throw new BusinessException("mensagem.rota.numero.menor.igual.zero");
		else if (numero > 9999)
			throw new BusinessException("mensagem.rota.numero.maior.que.9999");
	}

	/**
	 * M�todo que valida o campo nome da rota.
	 * 
	 * @param nome
	 * @throws BusinessException
	 */
	@Override
	public void validarNome(String nome) throws BusinessException {
		if (nome == null)
			throw new BusinessException("mensagem.rota.numero.nome.null");
		else if (nome.equalsIgnoreCase(""))
			throw new BusinessException("mensagem.rota.numero.nome.vazio");
		else if (nome.length() > 40)
			throw new BusinessException("Nome da Rota n�o pode ter mais que 40 caracteres.");
	}

	/**
	 * M�todo que valida o status da rota.
	 * 
	 * @param status
	 * @throws BusinessException
	 */
	@Override
	public void validarStatus(Boolean status) throws BusinessException {
		if (status == null)
			throw new BusinessException("mensagem.rota.status.null");
	}

	/**
	 * M�todo que valida as vers�es da rota.
	 * 
	 * @param versoes
	 * @throws BusinessException
	 */
	@Override
	public void validarVersoes(List<RotaVersao> versoes) throws BusinessException {
		if (versoes == null)
			throw new BusinessException("mensagem.rota.lista.versoes.null");
		else if (versoes.isEmpty())
			throw new BusinessException("mensagem.rota.lista.versoes.vazia");
	}
}