/**
 * Criado por 006157C6 em 25/04/2013
 */
package br.com.devnagui.project.objetodepagina.posto.manter;

import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.Select;

import br.com.devnagui.project.entities.Bomba;

/**
 * Criado por @author 006157C6 em 25/04/2013
 * 
 */
public class BombaObjetoDePagina extends ManterPostoCombustivelObjetoDePagina {

	// ATRIBUTOS E CONSTRUTORES

	private static final String PAINEL_DADOS_BOMBA = "dadosBomba";

	private static final String MENSAGEM_SALVO_SUCESSO_REGEX = "^[\\s\\S]*Bomba salva com sucesso![\\s\\S]*$";
	private static final String TITULO_PAINEL_TANQUE_REGEX = "^[\\s\\S]*Bomba criada / selecionado[\\s\\S]*$";

	@FindBy(id = "btNovaBomba")
	private WebElement botaoCriarBomba;

	@FindBy(id = "btAlterarBomba")
	private WebElement botaoAlterarBomba;

	@FindBy(id = "selectBombas")
	private WebElement selectBombas;

	@FindBy(id = "salvarBombaAjax")
	private WebElement botaoSalvarBomba;

	@FindBy(id = "numBombaInput")
	private WebElement numBombaInput;

	@FindBy(id = "nomFabricanteInput")
	private WebElement nomFabricanteInput;

	@FindBy(id = "numSerieInput")
	private WebElement numSerieInput;

	@FindBy(id = "modeloInput")
	private WebElement modeloInput;

	@FindBy(id = "tipMedicaoSelect")
	private WebElement tipMedicaoSelect;

	@FindBy(id = "observacoesBombaInput")
	private WebElement observacoesBombaInput;

	@FindBy(id = "dataAplicacaoInputInputDate")
	private WebElement dataAplicacaoInputInputDate;

	/**
	 * @param driver
	 * @throws Exception
	 */
	public BombaObjetoDePagina(WebDriver driver) throws Exception {
		super(driver);
	}

	private static final Logger LOG = Logger.getLogger(BombaObjetoDePagina.class);

	// METODOS PUBLICOS

	public BombaObjetoDePagina criarNovaBomba(Bomba bomba) throws InterruptedException {
		botaoCriarBomba.click();
		esperarRenderizarElementoPorId(PAINEL_DADOS_BOMBA);
		preencheInformacoesBomba(bomba);
		botaoSalvarBomba.click();
		esperaRenderizarMensagemComRegex(MENSAGEM_SALVO_SUCESSO_REGEX);
		return this;
	}

	public BombaObjetoDePagina alterarBomba(Bomba bomba) throws InterruptedException {
		new Select(selectBombas).selectByValue(bomba.getId().toString());
		botaoAlterarBomba.click();
		esperarRenderizarElementoPorId(PAINEL_DADOS_BOMBA);
		limpaCamposTela();
		preencheInformacoesBomba(bomba);
		botaoSalvarBomba.click();
		esperaRenderizarMensagemComRegex(MENSAGEM_SALVO_SUCESSO_REGEX);
		return this;
	}

	public boolean isBombaSalvaComSucesso() {
		return driver.findElement(By.cssSelector("BODY")).getText().matches(MENSAGEM_SALVO_SUCESSO_REGEX);
	}

	// METODOS PRIVADOS

	/**
	 * Serve para...
	 */
	private void limpaCamposTela() {
		LOG.info("Limpando campos da tela.");
		modeloInput.clear();
		nomFabricanteInput.clear();
		observacoesBombaInput.clear();
	}

	/**
	 * Serve para...
	 * 
	 * @param bomba
	 */
	private void preencheInformacoesBomba(Bomba bomba) {
		LOG.info("Preenchendo campos da tela.");
		numBombaInput.sendKeys(bomba.getNumBombaPosto().toString());
		numSerieInput.sendKeys(bomba.getNumSerieBomba());
		nomFabricanteInput.sendKeys(bomba.getNomeFabricanteBomba());
		modeloInput.sendKeys(bomba.getNomeModeloBomba());
		observacoesBombaInput.sendKeys(bomba.getObservacaoBomba());
	}

	// GETS E SETS
}
