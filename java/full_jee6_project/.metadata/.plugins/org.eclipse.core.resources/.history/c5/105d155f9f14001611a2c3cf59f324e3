package br.com.devnagui.project.manager.strategy.visita;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.ejb.EJB;
import javax.persistence.NoResultException;

import org.apache.log4j.Logger;

import br.com.devnagui.project.entities.ItemNFEEntrada;
import br.com.devnagui.project.entities.NFEEntrada;
import br.com.devnagui.project.entities.ProdutoCombustivel;
import br.com.devnagui.project.entities.Visita;
import br.com.devnagui.project.enums.SituacaoNFE;
import br.com.devnagui.project.enums.SituacaoRegistroItem;
import br.com.devnagui.project.enums.SituacaoVisita;
import br.com.devnagui.project.manager.NotaFiscalEletronicaManager;
import br.com.devnagui.project.manager.VisitaManager;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.webservices.consultanfe.adapter.ItemNFEAdapter;
import br.com.devnagui.project.webservices.consultanfe.adapter.NFEAdapter;

public class VisitaMedicaoNotaFiscalStrategyImpl implements VisitaMedicaoStrategy<NFEAdapter> {

    private static final Logger LOG = Logger.getLogger(VisitaMedicaoNotaFiscalStrategyImpl.class);
    
    @EJB
    private NotaFiscalEletronicaManager notaFiscalEletronicaManager;
    @EJB
    private VisitaManager visitaManager;
    
    public VisitaMedicaoNotaFiscalStrategyImpl(VisitaManager visitaManager, NotaFiscalEletronicaManager notaFiscalEletronicaManager) {
        this.notaFiscalEletronicaManager = notaFiscalEletronicaManager;
        this.visitaManager = visitaManager;
    }
    
    public VisitaMedicaoNotaFiscalStrategyImpl() {
    	//Construtor criado apenas para os testes.
	}
    
    @Override
    public List<NFEAdapter> montarMedicoesComInformacoesAnteriores(Visita visitaAtual, Set<Long> tiposCombustiveis) throws BusinessException {
        return null;
    }

    @Override
    public void removerMedicoesPorCombustivel(List<ProdutoCombustivel> produtoCombustiveisFiscalizados, List<NFEAdapter> medicoesCombustiveis) throws BusinessException {
        LOG.info("Removendo notas fiscas que nao estao associadas aos combustiveis fiscalizados.");
        
        Iterator<NFEAdapter> iterator = medicoesCombustiveis.iterator();
        while (iterator.hasNext()) {
            NFEAdapter nfeAdapterAtual = iterator.next();
            Iterator<ItemNFEAdapter> itemAdapeterIterator = nfeAdapterAtual.getItensDaNotaFiscal().iterator();
            while (itemAdapeterIterator.hasNext()) {
                ItemNFEAdapter itemNFEAdapterAtual = itemAdapeterIterator.next();
                if (!produtoCombustiveisFiscalizados.contains(itemNFEAdapterAtual.getProdutoCombustivel())) {
                    itemAdapeterIterator.remove();
                }
            }
            if (nfeAdapterAtual.getItensDaNotaFiscal().isEmpty()) {
                iterator.remove();
            }
        }
    }

    @Override
    public Visita salvarMedicoesCombustiveis(Visita visitaAtual, List<NFEAdapter> medicoesAtuais) throws BusinessException {
		LOG.info("Iniciando o metodo de salvar as notas fiscais.");

		validarNotasFiscais(visitaAtual, medicoesAtuais);

		if (visitaAtual.getId() != null) {
		    limparNotasFicaisPorVisita(visitaAtual.getId());
		}
		
		visitaAtual.setSituacaoVisita(SituacaoVisita.ABERTA);
		try {
		    //Caso esta ordem seja trocada, implicara num erro de constraint violada por conta do relacionamento
		    //visita - item - nota
		    visitaAtual.setItensDaNotaFiscal(null);
		    visitaAtual=visitaManager.salvar(visitaAtual);
	        visitaAtual.setItensDaNotaFiscal(new ArrayList<ItemNFEEntrada>());
	        for (NFEAdapter nfeInformada : medicoesAtuais) {
	            processaItensDaVisitaPorNFEAdapter(visitaAtual, nfeInformada);
	        }
		    notaFiscalEletronicaManager.salvarItensComNotaFiscal(visitaAtual);
        } catch (BusinessException e) {
            LOG.error("Erro ao concluir a medi��o.",e);
            throw e;
        }
		LOG.info("Finalizando o metodo de salvar as notas fiscais.");

		return visitaAtual;
    }

	
    @Override
	public NFEAdapter buscarMedicaoAnterior(Long idMedicao, Long idVisita) {
		return null;
	}
    
	private void limparNotasFicaisPorVisita(Long idVisita) {
		notaFiscalEletronicaManager.limparItensDaVisita(idVisita);
	}
    
    private void processaItensDaVisitaPorNFEAdapter(Visita visita, NFEAdapter nfeInformada) throws BusinessException {
        if (visita.getId() != null) {
            visitaManager.initiateObjectOrCollection(visita);
        }
        
        NFEEntrada nfeEntradaRetorno = null;
        try {
            nfeEntradaRetorno = notaFiscalEletronicaManager.obterNotaFiscalPorChaveDeAcesso(nfeInformada.getChaveAcessoNFE());
        } catch (NoResultException e) {
            LOG.error("Erro de negocio quando nao existe a nota fiscal na base, registrando apenas.", e);
        }
        if (nfeEntradaRetorno == null) {
            LOG.info("Processando NFe nova.");
            processaNfeNova(visita, nfeInformada);
        }else{
            LOG.info("Processando NFe antiga.");
            processaNFeInformadaAnteriormente(visita, nfeInformada, nfeEntradaRetorno);
        }
        
    }
    
    private void validarNotasFiscais(Visita visita, List<NFEAdapter> nfesInformadas) throws BusinessException {
        LOG.info("Iniciando validacao de notas fiscais informadas.");
        
        if(nfesInformadas == null || nfesInformadas.size() == 0 ) {
        	throw new BusinessException("msg.visita.salvarAlterar.nfe.invalida");
        }
        
        for (NFEAdapter nfeAtualNoFor : nfesInformadas) {
        	if(nfeAtualNoFor.getItensDaNotaFiscal() == null) {
        		LOG.info("Ainda n�o sei se deve gerar um exce��o.");
        		nfeAtualNoFor.setItensDaNotaFiscal(new ArrayList<ItemNFEAdapter>());
        	}
        	for ( ItemNFEAdapter itemNoFor : nfeAtualNoFor.getItensDaNotaFiscal()) {
        		if(itemNoFor.getItemEscolhido() && itemNoFor.getProdutoCombustivel() == null) {
        			throw new BusinessException("msg.visita.salvarAlterar.nfe.item.invalido");
        		}
        	}
            if(!SituacaoNFE.REGISTRO_MANUAL.equals(nfeAtualNoFor.getSituacao()) && !nfeAtualNoFor.getIsNotaNaoInformada()){
                LOG.info("Nota fiscal foi foi recuperada do NFeCorp: "+nfeAtualNoFor.getChaveAcessoNFE());
                notaFiscalEletronicaManager.validarNotaFiscalDoNFECorp(visita, nfeAtualNoFor);
            }else{
                LOG.info("Nota fiscal foi registrada manualmente: "+nfeAtualNoFor.getChaveAcessoNFE());
            }
        }
        
        LOG.info("Finalizando validacao de notas fiscais informadas.");
        
    }

    private void processaNfeNova(Visita visita, NFEAdapter nfeInformada) {
        //NFe eh completamente nova(por tabela,tmb seus itens)!
        NFEEntrada nfeEntradaNova = new NFEEntrada();
        nfeEntradaNova.setItensInformados(new ArrayList<ItemNFEEntrada>());
        nfeEntradaNova.setCodAcesso(nfeInformada.getChaveAcessoNFE());
        nfeEntradaNova.setDataEmissao(nfeInformada.getDataEmissaoNFE());
        
        for (ItemNFEAdapter itemInformado : nfeInformada.getItensDaNotaFiscal()) {
            if (itemInformado.getItemEscolhido()) {
                ItemNFEEntrada itemNFEEntradaNovo = new ItemNFEEntrada();
                itemNFEEntradaNovo.setNotaFiscal(nfeEntradaNova);
                itemNFEEntradaNovo.setVisita(visita);
                itemNFEEntradaNovo.setNumItemNFE(itemInformado.getNumeroItem().longValue());
                itemNFEEntradaNovo.setQtdEntrada(itemInformado.getQuantidade());
                itemNFEEntradaNovo.setProdutoCombustivel(itemInformado.getProdutoCombustivel());
                if (SituacaoNFE.REGISTRO_MANUAL.equals(nfeInformada.getSituacao())) {
                    itemNFEEntradaNovo.setSituacaoItem(SituacaoRegistroItem.INFORMADO_MANUALMENTE);
                } else {
                    itemNFEEntradaNovo.setSituacaoItem(SituacaoRegistroItem.IMPORTADO_DA_NFECORP);
                }
                nfeEntradaNova.getItensInformados().add(itemNFEEntradaNovo);
                visita.getItensDaNotaFiscal().add(itemNFEEntradaNovo);
            }
        }
    }
    
    private void processaNFeInformadaAnteriormente(Visita visita, NFEAdapter nfeInformada, NFEEntrada nfeEntradaBD) throws BusinessException {
        HashMap<Long, ItemNFEEntrada> hashMapItensJaInformadosNFeAntiga = new HashMap<Long, ItemNFEEntrada>();
        for (ItemNFEEntrada itemNFEEntradaJaInformado : nfeEntradaBD.getItensInformados()) {
            hashMapItensJaInformadosNFeAntiga.put(itemNFEEntradaJaInformado.getNumItemNFE(), itemNFEEntradaJaInformado);
        }
        for (ItemNFEAdapter itemInformado : nfeInformada.getItensDaNotaFiscal()) {
            if (itemInformado.getItemEscolhido()) {
                if (hashMapItensJaInformadosNFeAntiga.containsKey(itemInformado.getNumeroItem())
                        && hashMapItensJaInformadosNFeAntiga.get(itemInformado.getNumeroItem()).getVisita().getId().equals(visita.getId())) {
                    // Estamos alterando o item que ja existe na visita..Soh
                    // alterar valores dele
                    ItemNFEEntrada itemNFEEntradaAlterando = hashMapItensJaInformadosNFeAntiga.get(itemInformado.getNumeroItem());
                    itemNFEEntradaAlterando.setNumItemNFE(itemInformado.getNumeroItem().longValue());
                    itemNFEEntradaAlterando.setQtdEntrada(itemInformado.getQuantidade());
                    itemNFEEntradaAlterando.setProdutoCombustivel(itemInformado.getProdutoCombustivel());
                    itemNFEEntradaAlterando.setVisita(visita);
                    itemNFEEntradaAlterando.setNotaFiscal(nfeEntradaBD);
                    if (SituacaoNFE.REGISTRO_MANUAL.equals(nfeInformada.getSituacao())) {
                        itemNFEEntradaAlterando.setSituacaoItem(SituacaoRegistroItem.INFORMADO_MANUALMENTE);
                    } else {
                        itemNFEEntradaAlterando.setSituacaoItem(SituacaoRegistroItem.IMPORTADO_DA_NFECORP);
                    }
                    nfeEntradaBD.getItensInformados().add(itemNFEEntradaAlterando);
                    visita.getItensDaNotaFiscal().add(itemNFEEntradaAlterando);
                } else if (!hashMapItensJaInformadosNFeAntiga.containsKey(itemInformado.getNumeroItem())) {
                    // Informando um item novo para uma NFe que ja existe na
                    // base
                    ItemNFEEntrada itemNFEEntradaNovo = new ItemNFEEntrada();
                    itemNFEEntradaNovo.setNotaFiscal(nfeEntradaBD);
                    itemNFEEntradaNovo.setVisita(visita);
                    itemNFEEntradaNovo.setNumItemNFE(itemInformado.getNumeroItem().longValue());
                    itemNFEEntradaNovo.setQtdEntrada(itemInformado.getQuantidade());
                    itemNFEEntradaNovo.setProdutoCombustivel(itemInformado.getProdutoCombustivel());
                    if (SituacaoNFE.REGISTRO_MANUAL.equals(nfeInformada.getSituacao())) {
                        itemNFEEntradaNovo.setSituacaoItem(SituacaoRegistroItem.INFORMADO_MANUALMENTE);
                    } else {
                        itemNFEEntradaNovo.setSituacaoItem(SituacaoRegistroItem.IMPORTADO_DA_NFECORP);
                    }
                    nfeEntradaBD.getItensInformados().add(itemNFEEntradaNovo);
                    visita.getItensDaNotaFiscal().add(itemNFEEntradaNovo);
                } else if (hashMapItensJaInformadosNFeAntiga.containsKey(itemInformado.getNumeroItem())
                        && !hashMapItensJaInformadosNFeAntiga.get(itemInformado.getNumeroItem()).getVisita().getId().equals(visita.getId())) {
                    // O item foi informado em outra visita..ERRROROROROR!
                    throw new BusinessException("Um item s� pode ser registrado para uma visita");
                }
            }
        }
    }
}
