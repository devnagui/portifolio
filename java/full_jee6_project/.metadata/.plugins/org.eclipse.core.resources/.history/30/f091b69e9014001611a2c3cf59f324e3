package br.gov.ce.sefaz.project.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

/**
 * 
 * Criado por @author 006159C0 em 12/03/2013
 * 
 */
@Entity
@Table(name="ROTA",schema="PROJECT")
@SequenceGenerator(name = "SQ_ROTA", sequenceName = "SQ_ROTA", allocationSize  =1, initialValue = 1) 
@NamedQueries(value = {
		@NamedQuery(name = Rota.QUERY_BUSCA_ROTA_PELO_NUMERO, query = "SELECT r FROM Rota r WHERE r.numero = :numero") })
public class Rota implements Serializable {

	/**
	 * Serial UID.
	 */
	private static final long serialVersionUID = -3799840967322338692L;
	
	/**
	 * Query que busca rota pelo número.
	 */
	public static final String QUERY_BUSCA_ROTA_PELO_NUMERO = "buscaRotaPeloNumero";
	
	/**
	 * OrderBy pelo nome. 
	 */
	public static final String NOME_ATRIBUTO = "nome";
	
	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_ROTA")
	@Column(name = "SEQ_ROTA")
	private Long id;
	
	@NotNull
	@Column(name = "NUM_ROTA", length = 4, nullable = false)
	private Long numero;
	
	@NotNull
	@Column(name = "NOM_ROTA", length = 40, nullable = false)
	private String nome;
	
	@NotNull
	@Column(name = "STA_ROTA", nullable = false)
	private Boolean status;
	
	@Column(name="TXT_OBSERVACAO_ROTA")
	private String observacao;
	
	@PrimaryKeyJoinColumn
	@OneToMany(mappedBy = "rota", cascade = { CascadeType.PERSIST, CascadeType.REMOVE, CascadeType.REFRESH }, fetch = FetchType.EAGER)
	private List<RotaVersao> versoes;
	
	/**
	 * Construtor com padrão.
	 * 
	 */
	public Rota() {}
	
	/**
	 * Construtor com parametros.
	 * 
	 * @param numero
	 * @param nome
	 */
	public Rota(Long numero, String nome) {
		this.numero = numero;
		this.nome = nome;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Rota other = (Rota) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
	
	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id
	 *            the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the numero
	 */
	public Long getNumero() {
		return numero;
	}

	/**
	 * @param numero
	 * 				  the numero to set
	 */
	public void setNumero(Long numero) {
		this.numero = numero;
	}

	/**
	 * @return the nome
	 */
	public String getNome() {
		return nome;
	}

	/**
	 * @param nome
	 * 			    the nome to set
	 */
	public void setNome(String nome) {
		this.nome = nome;
	}

	/**
	 * @return the versoes
	 */
	public List<RotaVersao> getVersoes() {
		Collections.sort(versoes);
		return versoes;
	}

	/**
	 * @param versoes 
	 * 				the versoes to set
	 */
	public void setVersoes(List<RotaVersao> versoes) {
		this.versoes = versoes;
	}

	/**
	 * @return the status
	 */
	public Boolean getStatus() {
		return status;
	}

	/**
	 * @param status 
	 * 				the status to set
	 */
	public void setStatus(Boolean status) {
		this.status = status;
	}
	
	public String getObservacao() {
        return observacao;
    }

    public void setObservacao(String observacao) {
        this.observacao = observacao;
    }

    /**
	 * Método que retorna um status das rotas versões da rota, para a tabela
	 * na tela /manterRotas.xhtml.
	 * #aux = Ela serve para saber se eu já tenho uma versão ativa, se eu tiver ela concatena
	 * 		  com " | Em Edição", se não tiver ela concatena com "Em Edição".
	 * 
	 * @return String
	 */
	public String getStatusVersoes() {
		Collections.sort(versoes);
		String retorno = "";
		for (RotaVersao versao : versoes) {
			if(versao.getStatus() == 1)
				retorno = "Ativa";
			else if(versao.getStatus() == 2) {
				if(retorno != "")
					retorno += " | Em Edição";
				else
					retorno = "Em Edição";
			} else if(versao.getStatus() == 3) {
				if(retorno == "")
					retorno = "Desativada";
			}
		}
		return retorno;
	}

	@Override
	public String toString() {
		return "Rota [id=" + id + ", numero=" + numero + ", nome=" + nome
				+ ", versoes=" + versoes.size() + ", getStatusVersoes()="
				+ getStatusVersoes() + "]";
	}
	
	
}