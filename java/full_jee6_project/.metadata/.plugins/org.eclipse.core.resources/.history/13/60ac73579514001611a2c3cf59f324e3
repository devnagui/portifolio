/**
 * Criado por 006157C6 em 16/04/2013
 */
package br.com.devnagui.project.manager.posto.manter;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.entities.Bico;
import br.com.devnagui.project.entities.Bomba;
import br.com.devnagui.project.entities.Tanque;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.BicoManagerBean;
import br.com.devnagui.project.manager.impl.BombaManagerBean;
import br.com.devnagui.project.manager.impl.TanqueManagerBean;

/**
 * Criado por @author 006157C6 em 16/04/2013
 * 
 */
@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class BicoManagerBeanTest {

	// ATRIBUTOS E CONSTRUTORES

	/**
	 * 
	 */
	private static final long NUM_BICO_POSTO = -1L;

	/**
	 * 
	 */
	private static final String INSERIR_BICO_XML = "inserirBico.xml";

	private static final Long SEQ_BICO_1 = -3l;
	/**
	 * 
	 */
	private static final Logger LOG = Logger.getLogger(BicoManagerBeanTest.class);

	@TestedObject
	private BicoManagerBean bicoManagerBean;

	@TestedObject
	private BombaManagerBean bombasManagerBean;

	@TestedObject
	private TanqueManagerBean tanqueManager;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;

	// METODOS PUBLICOS

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, BombaManagerBeanTest.INSERIR_BOMBA_XML,
			TanqueManagerBeanTest.INSERIR_TANQUE_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirBicoSucesso() throws BusinessException {
		Bico bico = createBicoValido();
		bicoManagerBean.inserir(bico);
		Assert.assertTrue(bico.getId() != null);

	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, BombaManagerBeanTest.INSERIR_BOMBA_XML,
			TanqueManagerBeanTest.INSERIR_TANQUE_XML, INSERIR_BICO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testAlterarBicoSucesso() throws BusinessException {
		Bico bico = bicoManagerBean.buscar(SEQ_BICO_1);
		bico.setObservacaoBico("Bico dos testes unitarios alterado");
		bicoManagerBean.alterar(bico);

	}

	@Test(expected = BusinessException.class)
	public void testInserirBicoSemNumeroException() throws BusinessException {
		Bico bico = createBicoValido();
		bico.setObservacaoBico("Bico dos testes unitarios alterado");
		bico.setNumBicoPosto(null);
		try {
			bicoManagerBean.inserir(bico);
		} catch (BusinessException e) {
			LOG.info("Excecao esperada ao alterar bomba sem lacre.", e);
			Assert.assertEquals("msg.aba.bico.bicoEscolhido.numero.obrigatorio", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, BombaManagerBeanTest.INSERIR_BOMBA_XML,
			TanqueManagerBeanTest.INSERIR_TANQUE_XML, INSERIR_BICO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirBicoNaoUnicoException() throws BusinessException {
		Bico bico = createBicoValido();
		bico.setObservacaoBico("Bico dos testes unitarios alterado");
		bico.setNumBicoPosto(NUM_BICO_POSTO);
		try {
			bicoManagerBean.inserir(bico);
		} catch (BusinessException e) {
			LOG.info("Excecao esperada ao alterar bomba sem lacre.", e);
			Assert.assertEquals("msg.aba.bico.bicoEscolhido.numero.unico", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	public void testInserirBicoSemTanqueException() throws BusinessException {
		Bico bico = createBicoValido();
		bico.setObservacaoBico("Bico dos testes unitarios alterado");
		bico.setTanque(null);
		try {
			bicoManagerBean.inserir(bico);
		} catch (BusinessException e) {
			LOG.info("Excecao esperada ao alterar bomba sem lacre.", e);
			Assert.assertEquals("msg.aba.bico.bicoEscolhido.tanque.obrigatorio", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	public void testInserirBicoSemBombaException() throws BusinessException {
		Bico bico = createBicoValido();
		bico.setObservacaoBico("Bico dos testes unitarios alterado");
		bico.setBomba(null);
		try {
			bicoManagerBean.inserir(bico);
		} catch (BusinessException e) {
			Assert.assertEquals("msg.aba.bico.bicoEscolhido.bomba.obrigatorio", e.getMessage());
			throw e;
		}
	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, BombaManagerBeanTest.INSERIR_BOMBA_XML,
			TanqueManagerBeanTest.INSERIR_TANQUE_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testObterBicosDoPosto() throws BusinessException {
		List<Bico> obterBicosDoPosto = bicoManagerBean.obterBicosDoPosto(PostoCombustivelManagerBeanTest.SEQ_POSTO_1);
		Assert.assertTrue(obterBicosDoPosto != null && !obterBicosDoPosto.isEmpty());
	}

	// METODOS PRIVADOS

	/**
	 * Serve para...
	 * 
	 * @return
	 * @throws BusinessException
	 */
	private Bico createBicoValido() throws BusinessException {
		Bico bico = new Bico();
		Bomba bomba = bombasManagerBean.buscar(BombaManagerBeanTest.SEQ_BOMBA_1);
		Tanque tanque = tanqueManager.buscar(TanqueManagerBeanTest.SEQ_TANQUE_1);
		bico.setTanque(tanque);
		bico.setBomba(bomba);
		bico.setObservacaoBico("Bico novo dos testes unitarios.");
		TypedQuery<Long> query = entityManager.createQuery("select count(b.numBicoPosto) from Bico b where b.bomba.postoCombustivel.id = :idPosto",
				Long.class);
		query.setParameter("idPosto", bomba.getPostoCombustivel().getId());
		Long maximoNumBico = query.getSingleResult();
		bico.setNumBicoPosto(maximoNumBico + 1);
		return bico;
	}
	// GETS E SETS
}
