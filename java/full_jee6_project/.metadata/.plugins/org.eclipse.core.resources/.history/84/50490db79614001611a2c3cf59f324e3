package br.com.devnagui.project.posto.manter;

import java.util.Collections;
import java.util.concurrent.TimeUnit;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy;
import br.com.devnagui.project.entities.PostoCombustivel;
import br.com.devnagui.project.entities.Tanque;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.ContribuinteManagerBean;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;
import br.com.devnagui.project.manager.impl.TanqueManagerBean;
import br.com.devnagui.project.objetodepagina.MenuConvarObjetoDePagina;
import br.com.devnagui.project.objetodepagina.posto.manter.TanqueObjetoDePagina;
import br.com.devnagui.project.posto.ManterPostoCombustivelSuiteDeTestes;

@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class TanqueTesteFuncional {

	public static final String INSERIR_TANQUE_XML = "inserirTanque.xml";
	public static final Long CNPJ_POSTO_VALIDO = 7346349000129L;
	private static final Logger LOG = Logger.getLogger(TanqueTesteFuncional.class);
	public static final long SEQ_POSTO_DATASET = -99L;
	public static final Long SEQ_TANQUE_ALTERACAO = -3l;
	/**
	 * 
	 */
	public static final String INSERIR_POSTO_XML = "inserirPosto.xml";
	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManager;

	@TestedObject
	private TanqueManagerBean tanqueManagerBean;

	@TestedObject
	@InjectIntoByType(target = "postoCombustivelManager")
	private ContribuinteManagerBean contribuinteManagerBean;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;
	private WebDriver driver;

	@Before
	public void abrirBrowser() {
		driver = new FirefoxDriver();
		driver.manage().timeouts().implicitlyWait(ManterPostoCombustivelSuiteDeTestes.TEMPO_MAXIMO_TESTE_FUNCIONAL, TimeUnit.SECONDS);
	}

	@After
	public void fecharBrowser() {
		LOG.info("Finalizando os Testes funcionais.");
		driver.close();
	}

	@Test
	@DataSet(value = { INSERIR_POSTO_XML }, loadStrategy = InsertOrUpdateWithCommitLoadStrategy.class)
	public void testIncluirTanque() throws Exception {
		MenuConvarObjetoDePagina menuConvarObjetoDePagina = new MenuConvarObjetoDePagina(driver);
		menuConvarObjetoDePagina.chamaPaginaInicial();
		TanqueObjetoDePagina tanqueObjetoDePagina = menuConvarObjetoDePagina.acionarManterPostoCombustivel().digitaEEscolheNaBuscaPosto(
				CNPJ_POSTO_VALIDO.toString());
		tanqueObjetoDePagina.prepararNovoTanque().criarNovoTanque(obterNumTanqueValidoParaInsercao().toString(), "16", "99",
				"Tanque dos testes funcionais");
		Assert.assertTrue(tanqueObjetoDePagina.isTanqueSalvoComSucesso());

	}

	@Test
	@DataSet(value = { INSERIR_POSTO_XML, INSERIR_TANQUE_XML }, loadStrategy = InsertOrUpdateWithCommitLoadStrategy.class)
	public void testAlterarTanque() throws Exception {
		MenuConvarObjetoDePagina menuConvarObjetoDePagina = new MenuConvarObjetoDePagina(driver);
		menuConvarObjetoDePagina.chamaPaginaInicial();
		TanqueObjetoDePagina tanqueObjetoDePagina = menuConvarObjetoDePagina.acionarManterPostoCombustivel().digitaEEscolheNaBuscaPosto(
				CNPJ_POSTO_VALIDO.toString());
		Tanque tanque = obterTanqueParaAlteracao();
		tanque.setObservacao("Tanque dos testes funcionais alterado com sucesso!");
		tanqueObjetoDePagina = tanqueObjetoDePagina.prepararAlterarTanque(tanque.getId().toString()).alterarTanque(tanque);
		Assert.assertTrue(tanqueObjetoDePagina.isTanqueSalvoComSucesso());

	}

	/**
	 * cRIA UM NOVO NUMERO DE TANQUE VALIDO DE ACORDO COM A BASE.
	 * 
	 * @return
	 * @throws BusinessException
	 */
	private Long obterNumTanqueValidoParaInsercao() throws BusinessException {
		PostoCombustivel posto = null;
		posto = postoCombustivelManager.obterPostoCombustivelAtivoNaSefaz(CNPJ_POSTO_VALIDO);
		postoCombustivelManager.inicializarObjetoOuColecao(posto.getTanques());
		postoCombustivelManager.detach(posto);
		Long numTanqueNovo = 1L;
		if (posto != null) {
			if (!posto.getTanques().isEmpty()) {
				// mOCK DE UM NUMERO DE TANQUE QUE AINDA NAO EXISTA NA BASE
				numTanqueNovo = Collections.max(posto.getTanques()).getNumTanquePosto() + 1;
			}
		}
		return numTanqueNovo;
	}

	/**
	 * oBTEM UM ID de tanque valido para ser alterado
	 * 
	 * @return
	 * @throws BusinessException
	 */
	private Tanque obterTanqueParaAlteracao() throws BusinessException {
		Tanque tanque = tanqueManagerBean.searchForId(SEQ_TANQUE_ALTERACAO);
		tanqueManagerBean.detach(tanque);
		return tanque;

	}
}
