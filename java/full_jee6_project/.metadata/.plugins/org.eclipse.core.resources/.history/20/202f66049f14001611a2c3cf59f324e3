/**
 * Criado por 006157C6 em 03/04/2013
 */
package br.com.devnagui.project.entities;

import java.io.Serializable;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

/**
 * Criado por @author 006157C6 em 03/04/2013
 * 
 */
@Entity
@Table(name = "BICO",schema="PROJECT")
@NamedQueries(value = {
		@NamedQuery(name = Bico.QUERY_VERIFICA_NUM_BICO_UNIQUE, query = "select count(b) from Bico b where b.numBicoPosto = :numBicoPosto and b.id <> :idBico and b.bomba.postoCombustivel.id = :idPosto"),
		@NamedQuery(name = Bico.QUERY_BICOS_DO_POSTO, query = "select b from Bico b where b.bomba.postoCombustivel.id = :id order by b.numBicoPosto asc"),
		@NamedQuery(name = Bico.QUERY_BICOS_DO_POSTO_POR_PRODUTO_COMBUSTIVEL, query = "select b from Bico b where b.tanque.postoCombustivel.id = :id and b.tanque.produtoCombustivel.id in (:codsGurpoCombustivel) order by b.numBicoPosto asc")})
public class Bico implements Serializable, Comparable<Bico> {

	// ATRIBUTOS E CONSTRUTORES

	/**
	 * Chave para query bombas do posto.
	 */
	public static final String QUERY_BICOS_DO_POSTO = "obterBicosdoPosto";

	/**
	 * Chave para query bombas do posto.
	 */
	public static final String QUERY_VERIFICA_NUM_BICO_UNIQUE = "verificaBicoUnique";
	
	public static final String QUERY_BICOS_DO_POSTO_POR_PRODUTO_COMBUSTIVEL = "obterBicosDoPostoPorProdutoCombustivel";

	/**
	 * 
	 */
	private static final long serialVersionUID = -1136494266116422130L;

	@Id
	@Column(name = "SEQ_BICO")
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_BICO")
	@SequenceGenerator(name = "SQ_BICO", sequenceName = "SQ_BICO", allocationSize = 1, initialValue = 1)
	private Long id;

	@ManyToOne(optional = false, cascade = { CascadeType.MERGE, CascadeType.REFRESH })
	@JoinColumn(name = "SEQ_TANQUE", nullable = false)
	private Tanque tanque;

	@ManyToOne(optional = false, cascade = { CascadeType.MERGE, CascadeType.REFRESH })
	@JoinColumn(name = "SEQ_BOMBA", nullable = false)
	private Bomba bomba;

	@NotNull(message = "msg.aba.bico.bicoEscolhida.numero.unico")
	@Column(name = "NUM_BICO_POSTO", precision = 3, scale = 0)
	private Long numBicoPosto;

	@Column(name = "TXT_OBSERVACAO_BICO", length = 200)
	@Size(max=200,message="msg.aba.geral.observacao.maximo")
	private String observacaoBico;

	// METODOS PUBLICOS

	// METODOS PRIVADOS

	// GETS E SETS

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id
	 *            the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the tanque
	 */
	public Tanque getTanque() {
		return tanque;
	}

	/**
	 * @param tanque
	 *            the tanque to set
	 */
	public void setTanque(Tanque tanque) {
		this.tanque = tanque;
	}

	/**
	 * @return the bomba
	 */
	public Bomba getBomba() {
		return bomba;
	}

	/**
	 * @param bomba
	 *            the bomba to set
	 */
	public void setBomba(Bomba bomba) {
		this.bomba = bomba;
	}

	/**
	 * @return the observacaoBico
	 */
	public String getObservacaoBico() {
		return observacaoBico;
	}

	/**
	 * @param observacaoBico
	 *            the observacaoBico to set
	 */
	public void setObservacaoBico(String observacaoBico) {
		this.observacaoBico = observacaoBico;
	}

	/**
	 * @return the numBicoPosto
	 */
	public Long getNumBicoPosto() {
		return numBicoPosto;
	}

	/**
	 * @param numBicoPosto
	 *            the numBicoPosto to set
	 */
	public void setNumBicoPosto(Long numBicoPosto) {
		this.numBicoPosto = numBicoPosto;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	@Override
	public int compareTo(Bico o) {
		return this.numBicoPosto.compareTo(o.numBicoPosto);
	}

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((bomba == null) ? 0 : bomba.hashCode());
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((numBicoPosto == null) ? 0 : numBicoPosto.hashCode());
        result = prime * result + ((observacaoBico == null) ? 0 : observacaoBico.hashCode());
        result = prime * result + ((tanque == null) ? 0 : tanque.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof Bico))
            return false;
        Bico other = (Bico) obj;
        if (bomba == null) {
            if (other.bomba != null)
                return false;
        } else if (!bomba.equals(other.bomba))
            return false;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (numBicoPosto == null) {
            if (other.numBicoPosto != null)
                return false;
        } else if (!numBicoPosto.equals(other.numBicoPosto))
            return false;
        if (observacaoBico == null) {
            if (other.observacaoBico != null)
                return false;
        } else if (!observacaoBico.equals(other.observacaoBico))
            return false;
        if (tanque == null) {
            if (other.tanque != null)
                return false;
        } else if (!tanque.equals(other.tanque))
            return false;
        return true;
    }
	

}
