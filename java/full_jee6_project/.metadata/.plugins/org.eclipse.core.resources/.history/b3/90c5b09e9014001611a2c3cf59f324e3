package br.gov.ce.sefaz.project.entities;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

@Entity
@Table(name = "MEDICAO_TANQUE",schema="PROJECT")
@SequenceGenerator(name = "SQ_MEDICAO_TANQUE", sequenceName = "SQ_MEDICAO_TANQUE", allocationSize = 1, initialValue = 1)
@NamedQueries(value = {
		@NamedQuery(name = MedicaoTanque.OBTER_MEDICOES_ANTERIORES_POR_TANQUE, query = "select mt from MedicaoTanque mt where mt.tanque.id = :idTanque and (mt.visita.id <> :idVisitaAtual and mt.visita.id is not null) and mt.visita.situacaoVisita in (1,2,3) order by mt.id desc"),
		@NamedQuery(name = MedicaoTanque.OBTER_MEDICOES_POR_VISITA, query = "select mt from MedicaoTanque mt where mt.visita.id = :idVisita order by mt.id desc"),
		@NamedQuery(name=MedicaoTanque.DELETAR_MEDICOES_TANQUES_POR_VISISTA,query="delete from MedicaoTanque mt where mt.visita.id = :idVisita")})
public class MedicaoTanque implements Serializable {

    /**
     * Serial UID.
     */
    private static final long serialVersionUID = -1626382307466585801L;
    
    /**
     * Obtem as medicoes anteriores de um tanque, caso existam. E caso a visita esteja na situacao fechada ou em conformidade.
     */
    public static final String OBTER_MEDICOES_ANTERIORES_POR_TANQUE = "obterMedicoesAnterioresPorTanque";
    public static final String OBTER_MEDICOES_POR_VISITA = "obterMedicoesPorVisita";
    public static final String DELETAR_MEDICOES_TANQUES_POR_VISISTA = "deletarMedicoesPorVisita";

    @Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_MEDICAO_TANQUE")
	@Column(name = "SEQ_MEDICAO_TANQUE")
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "SEQ_VISITA")
    private Visita visita;
    
    @ManyToOne
    @JoinColumn(name = "SEQ_TANQUE")
    private Tanque tanque;
    
    @Column(name = "QTD_VOLUME_MEDIDO")
    private Long volumeMedido;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
    
    /**
	 * @return the visita
	 */
	public Visita getVisita() {
		return visita;
	}

	/**
	 * @param visita 
	 * 				the visita to set
	 */
	public void setVisita(Visita visita) {
		this.visita = visita;
	}

	public Tanque getTanque() {
        return tanque;
    }

    public void setTanque(Tanque tanque) {
        this.tanque = tanque;
    }

    public Long getVolumeMedido() {
        return volumeMedido;
    }

    public void setVolumeMedido(Long volumeMedido) {
        this.volumeMedido = volumeMedido;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((tanque == null) ? 0 : tanque.hashCode());
        result = prime * result + ((visita == null) ? 0 : visita.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        MedicaoTanque other = (MedicaoTanque) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (tanque == null) {
            if (other.tanque != null)
                return false;
        } else if (!tanque.equals(other.tanque))
            return false;
        if (visita == null) {
            if (other.visita != null)
                return false;
        } else if (!visita.equals(other.visita))
            return false;
        return true;
    }
    
}
