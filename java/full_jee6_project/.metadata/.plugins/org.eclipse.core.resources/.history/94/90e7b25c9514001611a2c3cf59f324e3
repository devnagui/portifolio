package br.com.devnagui.project.manager.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;
import org.joda.time.Duration;

import br.com.devnagui.project.entities.CombustivelVisita;
import br.com.devnagui.project.entities.ItemNFEEntrada;
import br.com.devnagui.project.entities.LeituraEncerrante;
import br.com.devnagui.project.entities.MedicaoTanque;
import br.com.devnagui.project.entities.ProdutoCombustivel;
import br.com.devnagui.project.entities.Visita;
import br.com.devnagui.project.entities.VisitaNfe;
import br.com.devnagui.project.enums.SituacaoVisita;
import br.com.devnagui.project.manager.CombustivelVisitaManager;
import br.com.devnagui.project.manager.NotaFiscalEletronicaManager;
import br.com.devnagui.project.manager.VisitaManager;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoBicoStrategyImpl;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoNotaFiscalStrategyImpl;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoStrategy;
import br.com.devnagui.project.manager.strategy.visita.VisitaMedicaoTanqueStrategyImpl;
import br.com.devnagui.project.vo.CalculoConformidadeEstoqueVO;
import br.com.devnagui.project.vo.CalculoConformidadeProdutoCombustivelVO;
import br.com.devnagui.project.vo.MedicaoBicoVO;
import br.com.devnagui.project.vo.MedicaoTanqueVO;
import br.com.devnagui.project.vo.MedicoesVisitaVO;
import br.com.devnagui.project.vo.SomatorioVolumeEntradaPorProdutoCombustivelVO;
import br.com.devnagui.project.webservices.consultanfe.adapter.NFEAdapter;

/**
 * 
 * Criado por @author 006158C3 em 11/06/2013
 * 
 */
@Stateless
public class VisitaManagerBean extends GenericManagerBean<Visita> implements VisitaManager {
    
    /**
     * Serial UID.
     */
    private static final long serialVersionUID = -5358397053025236349L;
    
    private static final Logger LOG = Logger.getLogger(VisitaManagerBean.class);
    
    @Inject
    @Named("visitaMedicaoStrategyPorTipo")
    private VisitaMedicaoStrategy<MedicaoTanqueVO> medicaoTanqueStrategy;
    
    @Inject
    @Named("visitaMedicaoStrategyPorTipo")
    private VisitaMedicaoStrategy<MedicaoBicoVO> medicaoBicoStrategy;
    
    @Inject
    @Named("visitaMedicaoStrategyPorTipo")
    private VisitaMedicaoStrategy<NFEAdapter> medicaoNotaFiscalStrategy;
    
    @Inject
    private CombustivelVisitaManager combustivelVisitaManager;
    
    @EJB private
    NotaFiscalEletronicaManager notaFiscalEletronicaManagerBean;

    /** ---------------------------------------------METODOS PUBLICOS------------------------------------------------------------------------- **/

    @Override
    public Visita salvar(Visita visita) throws BusinessException {
        if (visita.getId() == null) {
            LOG.info("Visita nova, inserindo visita.");
            inserir(visita);
        } else {
            LOG.info("Alterando visita.");
            visita = update(visita);
        }
        return visita;
    }
    
      /**
     * M�todo para consultar todas as visitas de um determinado posto de
     * combust�vel.
     * 
     * @param idPostoCombustivel
     */
    @Override
    public List<Visita> buscarVisitasPorIdPostoCombustivel(Long idPostoCombustivel) {
        LOG.info("Iniciando consultar todas as visitas para o posto de id = " + idPostoCombustivel + ".");
        TypedQuery<Visita> query = getEntityManager().createNamedQuery(Visita.QUERY_BUSCAR_VISITAR_POR_ID_POSTO_COMBUSTIVEL, Visita.class);
        query.setParameter("idPostoCombustivel", idPostoCombustivel);
        LOG.info("Finalizando consulta de todas as visitas.");
        return query.getResultList();
    }

    /**
     * Metodo que monta o VO de medicao com as informacoes das medicoes anteriores com as atuais.
     * @param idPosto
     * @param tiposCombustiveis
     * @throws BusinessException 
     */
    @Override
    public List<MedicaoTanqueVO> montarMedicoesComInformacoesAnterioresPorTanque(Visita visitaAtual, Set<Long> tiposCombustiveis) throws BusinessException {
        return medicaoTanqueStrategy.montarMedicoesComInformacoesAnteriores(visitaAtual, tiposCombustiveis);
    }

    
    /**
     * M�todo para montar uma lista de MedicaoBicoVO
     * 
     * @param idPosto
     * @param tiposCombustiveis
     * @throws BusinessException 
     */
    @Override
    public List<MedicaoBicoVO> montarMedicoesComInformacoesAnterioresPorBico(Visita visita, Set<Long> tiposCombustiveis) throws BusinessException {
        return medicaoBicoStrategy.montarMedicoesComInformacoesAnteriores(visita, tiposCombustiveis);
    }

    @Override
    public Visita salvarMedicoesTanques(Visita visita, List<MedicaoTanqueVO> medicoesPorTanque) throws BusinessException {
       return medicaoTanqueStrategy.salvarMedicoesCombustiveis(visita, medicoesPorTanque);
    }

	@Override
    public Visita salvarMedicoesBicos(Visita visita, List<MedicaoBicoVO> medicoesPorBico) throws BusinessException {
        return medicaoBicoStrategy.salvarMedicoesCombustiveis(visita, medicoesPorBico);
    }
    
    @Override
    public Visita salvarMedicoesNFE(Visita visita, List<NFEAdapter> nfesInformadas) throws BusinessException {
        return medicaoNotaFiscalStrategy.salvarMedicoesCombustiveis(visita, nfesInformadas);
    }
    
    @Override
	public void salvarCombustivelVisita(Visita visita, List<CombustivelVisita> combustiveisVisita) throws BusinessException {
    	if(visita.getId() == null) {
    		visita.setSituacaoVisita(SituacaoVisita.ABERTA);
    		visita.setDataVisita(new Date());
    		inserir(visita);
    	}
    	Iterator<CombustivelVisita> combustivelVisitaIterator = combustiveisVisita.iterator();
    	while (combustivelVisitaIterator.hasNext()) {
    		CombustivelVisita combustivelVisita = combustivelVisitaIterator.next();
    		if(combustivelVisita.getValor() == null || combustivelVisita.getValor() == 0) {
    		} else {
    			if(combustivelVisita.getId() == null) {
    				combustivelVisita.setVisita(visita);
    				combustivelVisita.setDataRegistro(new Date());
    				combustivelVisitaManager.inserir(combustivelVisita);
    			} else {
    				combustivelVisitaManager.update(combustivelVisita);
    			}
    		}
    	}
	}
   
    /**
     * M�todo para verificar se a visita pode ser alterada ou excluida.
     */
	@Override
    public Boolean isPossivelAlterarExcluirVisita(Visita visita) {
        LOG.info("Iniciando metodo para verificar se existe visita anterior.");
        Boolean retorno=false;
    	try {
			TypedQuery<Visita> query = getEntityManager().createNamedQuery(Visita.QUERY_BUSCAR_VISITA_POSTERIR_POR_VISITA, Visita.class);
			query.setParameter("idPostoCombustivel", visita.getPostoCombustivel().getId());
			query.setParameter("idVisitaAtual", visita.getId());
			query.setMaxResults(1);
			Visita visitaAtual = query.getSingleResult();
			if (SituacaoVisita.ABERTA.equals(visita.getSituacaoVisita())) {
                LOG.info("Visita valida para alteracao por estar aberta");
			    retorno=true;
			} else {
	             LOG.info("A situacao da visista � "+visita.getSituacaoVisita());
	             if (visitaAtual == null && visita.getRoteiro().getDataFim().after(new Date())) {
                     LOG.info("Visita valida para alteracao");
	                 retorno=true;
				} else {
				    LOG.info("Visita invalida para alteracao por data ou por nao ser a ultima");
					retorno =false;
				}
			}

		} catch (NoResultException e) {
		    LOG.error("Considerando que n�o existe visita posterior ao roteiro. ((Registrando erro apenas por precaucao))",e);
		    retorno= true;
		}
    	LOG.info("Finalizando metodo para verificar se existe visita anterior.");
    	return retorno;
		
    }

    @Override
    public void removerMedicoesPorCombustivel(Visita visita, List<ProdutoCombustivel> produtoCombustiveisFiscalizados, List<MedicaoTanqueVO> medicoesPorTanque,
            List<MedicaoBicoVO> medicoesPorBico, List<NFEAdapter> nfeServicos) throws BusinessException {
        LOG.info("Iniciando metodo para remover medicoes por combustiveis.");

        medicaoTanqueStrategy.removerMedicoesPorCombustivel(produtoCombustiveisFiscalizados, medicoesPorTanque);
        
        medicaoBicoStrategy.removerMedicoesPorCombustivel(produtoCombustiveisFiscalizados, medicoesPorBico);
        
        medicaoNotaFiscalStrategy.removerMedicoesPorCombustivel(produtoCombustiveisFiscalizados, nfeServicos);
        
        visita.setSituacaoVisita(SituacaoVisita.ABERTA);
        LOG.info("Finalizando metodo para remover medicoes por combustiveis.");
    }
    
    @Override
    public CalculoConformidadeEstoqueVO concluirMedicoes(Visita visita, List<ProdutoCombustivel> produtoCombustiveisFiscalizados, Boolean adicionarNFE) throws BusinessException {
        LOG.info("Iniciando de concluir medicao dos combustiveis.");
		
        if(visita.getCombustiveisFiscalizados() == null) {
			visita.setCombustiveisFiscalizados(new HashSet<ProdutoCombustivel>());
		}
		for (ProdutoCombustivel produtoCombustivelFiscalizado : produtoCombustiveisFiscalizados) {
			visita.getCombustiveisFiscalizados().add(produtoCombustivelFiscalizado);
		}	
      
        MedicoesVisitaVO medicoesVistaVO = obterMedicoesPorVisita(visita.getId());
		visita.setMedicoesTanque(medicoesVistaVO.getMedicoesTanque());
		visita.setLeituraEncerrantes(medicoesVistaVO.getMedicoesBico());
		visita.setItensDaNotaFiscal(medicoesVistaVO.getItensNotaFiscal());
        
		inicializarObjetoOuColecao(visita);

		CalculoConformidadeEstoqueVO calculoConformidadeEstoqueVO = null;
        
		if (visita.getMedicoesTanque() == null || visita.getMedicoesTanque().size() == 0) {
            throw new BusinessException("msg.visita.medicaoTanque.nao.preenchida");
        }
        if (visita.getLeituraEncerrantes() == null || visita.getLeituraEncerrantes().size() == 0) {
            throw new BusinessException("msg.visita.medicaoBico.nao.preenchida");
        }
        if(adicionarNFE) {
        	if (visita.getItensDaNotaFiscal().size() == 0) {
        		throw new BusinessException("msg.visita.nfe.nao.preenchida");
        	}
        }
        try {
	        calculoConformidadeEstoqueVO=verificarSePossivelCalcularConformidadeEstoque(visita);
            
        } catch (Exception e) {
            LOG.error("Erro ao concluir a medi��o.",e);
            throw new BusinessException("msg.visita.concluir.erro", e);

        }
        LOG.info("Finalizando de concluir medicao dos combustiveis.");
        
        return calculoConformidadeEstoqueVO;
    }
  
    /**
     * Parte da RN06.03 
     * 
     * <br/>Decurso de tempo (em dias) n�o ultrapassado: �ltima
     * visita ao posto* <= (dura��o do ciclo da rota atual) multiplicado por 2
     * Dias passados desde a �ltima visita ao posto na qual o combust�vel foi
     * medido;
     * 
     * @param ultimaVisita
     * @return true caso a regra acima seja valida.
     */
    public boolean isDadosVisitaAnteriorDisponivel(Visita ultimaVisita) {
        Date dataVisita = ultimaVisita.getDataVisita();
        Duration duration = new Duration(new Date().getTime() - dataVisita.getTime());
        int diferencaEmDiasDaVisita4DataAtual = duration.toPeriod().getDays();
        return diferencaEmDiasDaVisita4DataAtual <= ultimaVisita.getRoteiro().getRotaVersao().getDuracao() * 2;
    }
    
    @Override
    public MedicoesVisitaVO obterMedicoesPorVisita(Long id) {
        LOG.info("Iniciando metodo de consulta de medicoes por visita.");
        
        TypedQuery<MedicaoTanque> queryMedicoesTanque = getEntityManager().createNamedQuery(MedicaoTanque.OBTER_MEDICOES_POR_VISITA, MedicaoTanque.class);
        queryMedicoesTanque.setParameter("idVisita", id);
        List<MedicaoTanque> medicoesTanque = queryMedicoesTanque.getResultList();
        
        TypedQuery<LeituraEncerrante> queryMedicoesBico = getEntityManager().createNamedQuery(LeituraEncerrante.QUERY_OBTER_LEITURAS_POR_VISITA, LeituraEncerrante.class);
        queryMedicoesBico.setParameter("idVisita", id);
        List<LeituraEncerrante> medicoesBico = queryMedicoesBico.getResultList();
        
        TypedQuery<ItemNFEEntrada> queryItensNotaFiscal = getEntityManager().createNamedQuery(ItemNFEEntrada.QUERY_OBTER_ITENS_DA_NOTA_POR_VISITA, ItemNFEEntrada.class);
        queryItensNotaFiscal.setParameter("idVisita", id);
        List<ItemNFEEntrada> itensNotaFiscal = queryItensNotaFiscal.getResultList();
        
        LOG.info("Finalizando metodo de consulta de medicoes por visita.");
        return new MedicoesVisitaVO(medicoesTanque, medicoesBico, itensNotaFiscal);
    }
    
	@Override
	public MedicaoBicoVO buscarMedicaoAnteriorPorBico(Long idBico, Long idVisita) {
		return medicaoBicoStrategy.buscarMedicaoAnterior(idBico, idVisita);
	}

	@Override
	public MedicaoTanqueVO buscarMedicaoAnteriorPorTanque(Long idTanque, Long idVisita) {
		return medicaoTanqueStrategy.buscarMedicaoAnterior(idTanque, idVisita);
	}

	@Override
	public NFEAdapter buscarMedicaoAnteriorPorNfe(Long idNfe, Long idVisita) {
		return medicaoNotaFiscalStrategy.buscarMedicaoAnterior(idNfe, idVisita);
	}
	
	public void excluirNotaFiscalDaVisita(Visita visitaAtual,Long idNotaFiscal){
	    Query queryDeleteItemNFE = getEntityManager().createNamedQuery(ItemNFEEntrada.QUERY_DELETAR_ITENS_NOTA_FISCAL_POR_VISITA_NFE);
	    queryDeleteItemNFE.setParameter("idVisita", visitaAtual.getId());
	    queryDeleteItemNFE.setParameter("idNota", idNotaFiscal);
	    queryDeleteItemNFE.executeUpdate();
	    Query query = getEntityManager().createNamedQuery(VisitaNfe.QUERY_REMOVER_VISITAS_NFE_POR_ID_VISITA_E_NFE);
        query.setParameter("idVisita", visitaAtual.getId());
        query.setParameter("idNota", idNotaFiscal);
        query.executeUpdate();
	}
	
	public void finalizarVisita(CalculoConformidadeEstoqueVO conformidadeEstoqueVO) throws BusinessException{
	    
        if (SituacaoVisita.ESTOQUE_NAO_CONFORME.equals((conformidadeEstoqueVO.getSituacaoVisita()))
                && !conformidadeEstoqueVO.getSituacaoVisita().equals(conformidadeEstoqueVO.getVisita().getSituacaoVisita())) {
            if(conformidadeEstoqueVO.getVisita().getDescParecer().isEmpty()){
                throw new BusinessException("msg.visita.concluir.parecer.obrigatorio");
            }
        }
        
        update(conformidadeEstoqueVO.getVisita());
	    
	}
	
    
    /** ---------------------------------------------METODOS PRIVADOS------------------------------------------------------------------------- **/
    private CalculoConformidadeEstoqueVO verificarSePossivelCalcularConformidadeEstoque(Visita visitaAtual) throws BusinessException {
        LOG.info("Iniciando metodo para verificacao de calculo de conformidade.");

        Map<ProdutoCombustivel,CalculoConformidadeProdutoCombustivelVO> mapCalculoPorCombustivel = new HashMap<ProdutoCombustivel,CalculoConformidadeProdutoCombustivelVO>();
        
        calcularVolumeIdealPorTanques(visitaAtual, mapCalculoPorCombustivel);
        if(mapCalculoPorCombustivel.size()>0){
            calcularVolumeEntradaPorNFes(visitaAtual,mapCalculoPorCombustivel);
            calcularVolumeSaidaPorEncerrantes(visitaAtual,mapCalculoPorCombustivel);
            calcularOmissaoEstoque(visitaAtual,mapCalculoPorCombustivel);
            Set<CalculoConformidadeProdutoCombustivelVO> calculosDeConformidadePorCombustivel = new HashSet<CalculoConformidadeProdutoCombustivelVO>(
                    mapCalculoPorCombustivel.values());        
            
            return new CalculoConformidadeEstoqueVO(calculosDeConformidadePorCombustivel, visitaAtual);
        }else{
            visitaAtual.setSituacaoVisita(SituacaoVisita.FECHADA);
            LOG.info("N�o haver� calculo de conformidade pois n�o h� dados anteriores para os tanques.");
        }
        LOG.info("Finalizando metodo para verificacao de calculo de conformidade.");

        return new CalculoConformidadeEstoqueVO(null, visitaAtual);
    }

    private void calcularVolumeIdealPorTanques(Visita visitaAtual,Map<ProdutoCombustivel, CalculoConformidadeProdutoCombustivelVO> mapCalculoPorCombustivel) throws BusinessException {
        LOG.info("Iniciando metodo para calculo de volume anterior de combustiveis.");
        if(visitaAtual.getCombustiveisFiscalizados() == null) {
        	visitaAtual.setCombustiveisFiscalizados(new HashSet<ProdutoCombustivel>());
        }
        List<MedicaoTanqueVO> listaMedicoesTanquesVOComAnterior = null;
        {
            Set<Long> combustiveisFiscalizados = new HashSet<Long>();
            for (ProdutoCombustivel produtoCombustivelFiscalizado : visitaAtual.getCombustiveisFiscalizados()) {
                combustiveisFiscalizados.add(produtoCombustivelFiscalizado.getId());
            }
            listaMedicoesTanquesVOComAnterior = medicaoTanqueStrategy.montarMedicoesComInformacoesAnteriores(visitaAtual, combustiveisFiscalizados);
        }
        
        for (MedicaoTanqueVO medicaoTanqueVOAtual : listaMedicoesTanquesVOComAnterior) {
            if(medicaoTanqueVOAtual.getMedicaoTanqueAnterior()!=null){
                CalculoConformidadeProdutoCombustivelVO calculoConformidadeDoCombustivelPorTanqueVO = null;
                ProdutoCombustivel produtoCombustivelDoTanqueAtual = medicaoTanqueVOAtual.getMedicaoTanqueAtual().getTanque().getProdutoCombustivel();
                if(mapCalculoPorCombustivel.containsKey(produtoCombustivelDoTanqueAtual)){
                    calculoConformidadeDoCombustivelPorTanqueVO = mapCalculoPorCombustivel.get(produtoCombustivelDoTanqueAtual);
                }else{
                    calculoConformidadeDoCombustivelPorTanqueVO = new CalculoConformidadeProdutoCombustivelVO();
                    calculoConformidadeDoCombustivelPorTanqueVO.setProdutoCombustivel(produtoCombustivelDoTanqueAtual);
                    mapCalculoPorCombustivel.put(produtoCombustivelDoTanqueAtual, calculoConformidadeDoCombustivelPorTanqueVO);
                }
                somarVolumesAcumuladosPorTanque(calculoConformidadeDoCombustivelPorTanqueVO,medicaoTanqueVOAtual);
            }
        }
        LOG.info("Finalizando metodo para calculo de volume anterior de combustiveis.");

    }

    private void somarVolumesAcumuladosPorTanque(CalculoConformidadeProdutoCombustivelVO calculoConformidadeDoCombustivelPorTanqueVO,
            MedicaoTanqueVO medicaoTanqueVOAtual) {
        {
            Long volumeAnteriorAcumulado = calculoConformidadeDoCombustivelPorTanqueVO.getVolumeAnterior();
            volumeAnteriorAcumulado = +medicaoTanqueVOAtual.getMedicaoTanqueAnterior().getVolumeMedido();
            calculoConformidadeDoCombustivelPorTanqueVO.setVolumeAnterior(volumeAnteriorAcumulado);
        }
        {
            Long volumeAtualAcumulado = calculoConformidadeDoCombustivelPorTanqueVO.getVolumeAtual();
            volumeAtualAcumulado += medicaoTanqueVOAtual.getMedicaoTanqueAtual().getVolumeMedido();
            calculoConformidadeDoCombustivelPorTanqueVO.setVolumeAtual(volumeAtualAcumulado);
        }
    }
    
    private void calcularVolumeSaidaPorEncerrantes(Visita visitaAtual, Map<ProdutoCombustivel, CalculoConformidadeProdutoCombustivelVO> mapCalculoPorCombustivel) throws BusinessException {
        LOG.info("Iniciando metodo para calculo de saida de estoque por leitura de encerrantes.");

        List<MedicaoBicoVO> listaMedicoesBicosComAnteriores = null;
        {
            Set<Long> combustiveisFiscalizados = new HashSet<Long>();
            for (ProdutoCombustivel produtoCombustivelFiscalizado : visitaAtual.getCombustiveisFiscalizados()) {
                combustiveisFiscalizados.add(produtoCombustivelFiscalizado.getId());
            }
            listaMedicoesBicosComAnteriores = medicaoBicoStrategy.montarMedicoesComInformacoesAnteriores(visitaAtual, combustiveisFiscalizados);
        }

        for (MedicaoBicoVO medicaoBicoVOAtual : listaMedicoesBicosComAnteriores) {
            if(medicaoBicoVOAtual.getLeituraEncerranteAnterior()!=null){
                CalculoConformidadeProdutoCombustivelVO calculoConformidadeProdutoCombustivelVO = mapCalculoPorCombustivel.get(medicaoBicoVOAtual.getLeituraEncerranteAnterior().getBico().getTanque().getProdutoCombustivel());
                somarValoresSaidasAcumulados(calculoConformidadeProdutoCombustivelVO, medicaoBicoVOAtual);
            }
            
        }
        LOG.info("Finalizando metodo para calculo de saida de estoque por leitura de encerrantes.");

    }

    private void somarValoresSaidasAcumulados(CalculoConformidadeProdutoCombustivelVO calculoConformidadeProdutoCombustivelVO,
            MedicaoBicoVO medicaoBicoVOAtual) {
        Long volumeSaidaTotal = calculoConformidadeProdutoCombustivelVO.getVolumeSaida();
        Long volumeSaidaMedidoAtual = medicaoBicoVOAtual.getLeituraEncerranteAtual().getQtdLeituraEncerrante();
        Long volumeSaidaMedidoAnterior = medicaoBicoVOAtual.getLeituraEncerranteAnterior().getQtdLeituraEncerrante();
        //Subtraiomos o valor anterior pois o medidor dos bicos eh "sempre" incremental.
        volumeSaidaTotal=+volumeSaidaMedidoAtual-volumeSaidaMedidoAnterior;
        calculoConformidadeProdutoCombustivelVO.setVolumeSaida(volumeSaidaTotal);
    }
    
    private void calcularVolumeEntradaPorNFes(Visita visitaAtual, Map<ProdutoCombustivel, CalculoConformidadeProdutoCombustivelVO> mapCalculoPorCombustivel) {
        LOG.info("Iniciando metodo para calculo de volume de entrada por itens da nfe.");
        
        for(ProdutoCombustivel produtoCombustivel:mapCalculoPorCombustivel.keySet()){
            TypedQuery<SomatorioVolumeEntradaPorProdutoCombustivelVO> quertySomatorioPorCombustivel = getEntityManager().createNamedQuery(ItemNFEEntrada.QUERY_OBTER_SOMATORIO_VOLUME_ENTRADA_COMBUSTIVEL_POR_NFE, SomatorioVolumeEntradaPorProdutoCombustivelVO.class);
            quertySomatorioPorCombustivel.setParameter("idVisita", visitaAtual.getId());
            quertySomatorioPorCombustivel.setParameter("idCombustivel", produtoCombustivel.getId());
            List<SomatorioVolumeEntradaPorProdutoCombustivelVO> listaSomatorio = quertySomatorioPorCombustivel.getResultList();
            if(listaSomatorio.size()>0){
                SomatorioVolumeEntradaPorProdutoCombustivelVO somatorioVolumeEntradaPorProdutoCombustivelVO = listaSomatorio.iterator().next();
                mapCalculoPorCombustivel.get(produtoCombustivel).setVolumeEntrada(somatorioVolumeEntradaPorProdutoCombustivelVO.getSomatorioVolume());
            }else{
                LOG.info("O combustivel "+produtoCombustivel.getNomeCombustivel()+" n�o possui entradas de itens DE NFe de abastecimento.");
                mapCalculoPorCombustivel.get(produtoCombustivel).setVolumeEntrada(0l);
            }
            
        }
        LOG.info("Finalizando metodo para calculo de volume de entrada por itens da nfe.");
    }
    
    private void calcularOmissaoEstoque(Visita visitaAtual,Map<ProdutoCombustivel, CalculoConformidadeProdutoCombustivelVO> mapCalculoPorCombustivel) throws BusinessException {
        LOG.info("Iniciando metodo para calculo de conformidade de estoque por combustivel.");

        boolean estoqueEmConformidade = true;
        for (CalculoConformidadeProdutoCombustivelVO calculoConformidadeProdutoCombustivelVO : mapCalculoPorCombustivel.values()) {
            
            Long volumeIdeal = (calculoConformidadeProdutoCombustivelVO.getVolumeAnterior()+calculoConformidadeProdutoCombustivelVO.getVolumeEntrada()) -(calculoConformidadeProdutoCombustivelVO.getVolumeSaida());
            calculoConformidadeProdutoCombustivelVO.setVolumeIdeal(volumeIdeal);
            Long volumeOmisso = calculoConformidadeProdutoCombustivelVO.getVolumeIdeal() - calculoConformidadeProdutoCombustivelVO.getVolumeAtual();
            
            calculoConformidadeProdutoCombustivelVO.setVolumeOmisso(volumeOmisso);
            
            Double percentualOmissao= volumeOmisso / (calculoConformidadeProdutoCombustivelVO.getVolumeAnterior().doubleValue() + calculoConformidadeProdutoCombustivelVO.getVolumeEntrada().doubleValue());
            percentualOmissao=Math.abs(percentualOmissao);
            calculoConformidadeProdutoCombustivelVO.setPercentualOmissao(percentualOmissao);
            
            if (!(Math.abs(volumeOmisso) <= getParametroVolumeOmisso(calculoConformidadeProdutoCombustivelVO.getProdutoCombustivel()))
                    && !(Math.abs(percentualOmissao) <= getParametroPercentualOmissao(calculoConformidadeProdutoCombustivelVO.getProdutoCombustivel()))) {
                LOG.info("O combustivel "+ calculoConformidadeProdutoCombustivelVO.getProdutoCombustivel().getNomeCombustivel()+ " n�o est� em conformidade.");
                estoqueEmConformidade=false;
                calculoConformidadeProdutoCombustivelVO.setSituacaoEstoque(SituacaoVisita.ESTOQUE_NAO_CONFORME);
            }else{
                calculoConformidadeProdutoCombustivelVO.setSituacaoEstoque(SituacaoVisita.ESTOQUE_EM_CONFORMIDADE);
            }
        }
        
        if(estoqueEmConformidade){
            LOG.info("Visita foi classificada com situacao de Estoque em conformidade.");
            visitaAtual.setSituacaoVisita(SituacaoVisita.ESTOQUE_EM_CONFORMIDADE);
        }else{
            LOG.info("Visita foi classificada com situacao de Estoque n�o conforme.");
            visitaAtual.setSituacaoVisita(SituacaoVisita.ESTOQUE_NAO_CONFORME);
        }
        
        LOG.info("Finalizando metodo para calculo de conformidade de estoque por combustivel.");

    }

    private double getParametroPercentualOmissao(ProdutoCombustivel produtoCombustivel) throws BusinessException {
        Double pcOmissaoAceitavel = produtoCombustivel.getPcOmissaoAceitavel();
        LOG.info("O numero do percentual de omissao aceit�vel do(a) "+produtoCombustivel.getNomeCombustivel() + " � de " +pcOmissaoAceitavel );
        if(pcOmissaoAceitavel==null){
            throw new BusinessException(new String[] {"msg.visita.produtoCombustivel.pcOmissao.nulo",produtoCombustivel.getNomeCombustivel()});
        }
        return pcOmissaoAceitavel;
    }

    private long getParametroVolumeOmisso(ProdutoCombustivel produtoCombustivel) throws BusinessException {
        Long volumeOmissaoAceitavel = produtoCombustivel.getVolumeOmissaoAceitavel();
        LOG.info("O numero do volume de omissao aceit�vel do(a) "+produtoCombustivel.getNomeCombustivel() + " � de " +volumeOmissaoAceitavel );
        if(volumeOmissaoAceitavel==null){
            throw new BusinessException(new String[] {"msg.visita.produtoCombustivel.volumeOmissao.nulo",produtoCombustivel.getNomeCombustivel() });
        }
        return volumeOmissaoAceitavel;
    }

    /** ALTERNATIVAS PARA TESTES UNITARIOS**/
    
	/**
	 * @param medicaoTanqueStrategy 
	 * 				the medicaoTanqueStrategy to set
	 */
	public void setMedicaoTanqueStrategy(
			VisitaMedicaoTanqueStrategyImpl medicaoTanqueStrategy) {
		this.medicaoTanqueStrategy = medicaoTanqueStrategy;
	}
	

	/**
	 * @param medicaoBicoStrategy 
	 * 				the medicaoBicoStrategy to set
	 */
	public void setMedicaoBicoStrategy(
			VisitaMedicaoBicoStrategyImpl medicaoBicoStrategy) {
		this.medicaoBicoStrategy = medicaoBicoStrategy;
	}

	/**
	 * @param medicaoNotaFiscalStrategy 
	 * 				the medicaoNotaFiscalStrategy to set
	 */
	public void setVisitaMedicaoNotaFiscalStrategyImpl(
			VisitaMedicaoNotaFiscalStrategyImpl medicaoNotaFiscalStrategy) {
		this.medicaoNotaFiscalStrategy = medicaoNotaFiscalStrategy;
	}

	@Override
	public Boolean isPrimeiraVisita(Long idVisita, Long idPostoCombustivel) {
		TypedQuery<Visita> query = getEntityManager().createNamedQuery(Visita.QUERY_BUSCAR_VISITA_ANTERIOR_POR_POSTO_VISITA, Visita.class);
		query.setParameter("idPostoCombustivel", idPostoCombustivel);
		query.setParameter("idVisitaAtual", idVisita);
		if(query.getResultList().size() > 0) {
			return true;
		} 
		return false;
	}
	
}
