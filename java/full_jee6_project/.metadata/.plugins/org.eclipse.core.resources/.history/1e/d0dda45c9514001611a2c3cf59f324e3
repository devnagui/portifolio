/**
 * Criado por 006157C6 em 03/04/2013
 */
package br.com.devnagui.project.manager.impl;

import java.util.List;
import java.util.Set;

import javax.ejb.Stateless;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;

import br.com.devnagui.project.entities.Bico;
import br.com.devnagui.project.manager.BicoManager;
import br.com.devnagui.project.manager.exception.BusinessException;

/**
 * Criado por @author 006157C6 em 03/04/2013
 * 
 */
@Stateless
public class BicoManagerBean extends GenericManagerBean<Bico> implements BicoManager {

	// ATRIBUTOS E CONSTRUTORES

	/**
	 * 
	 */
	private static final long serialVersionUID = -8128602510141606751L;
	private static final Logger LOG = Logger.getLogger(BicoManagerBean.class);

	// METODOS PUBLICOS

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * br.com.devnagui.project.manager.impl.GenericoManagerBean#alterar(java.
	 * io.Serializable)
	 */
	@Override
	public Bico update(Bico entidade) throws BusinessException {
		validarBico(entidade);
		return super.update(entidade);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * br.com.devnagui.project.manager.impl.GenericoManagerBean#inserir(java.
	 * io.Serializable)
	 */
	@Override
	public void inserir(Bico entidade) throws BusinessException {
		validarBico(entidade);
		super.inserir(entidade);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * br.com.devnagui.project.manager.BicoManager#obterBicosDoPosto(java.lang
	 * .Long)
	 */
	@Override
	public List<Bico> obterBicosDoPosto(Long idPosto) {
		LOG.info("Obtendo bicos do posto.");
		TypedQuery<Bico> createNamedQuery = getEntityManager().createNamedQuery(Bico.QUERY_BICOS_DO_POSTO, Bico.class);
		createNamedQuery.setParameter("id", idPosto);
		return createNamedQuery.getResultList();
	}

	// METODOS PRIVADOS
	/**
	 * Serve para...
	 * 
	 * @throws BusinessException
	 */
	private void validarBico(Bico entidade) throws BusinessException {
		LOG.info("Iniciando validacao de bico.");
		if (entidade.getNumBicoPosto() == null || entidade.getNumBicoPosto() == 0) {
			throw new BusinessException("msg.aba.bico.bicoEscolhido.numero.obrigatorio");
		}
		if (entidade.getTanque() == null) {
			throw new BusinessException("msg.aba.bico.bicoEscolhido.tanque.obrigatorio");
		}
		if (entidade.getBomba() == null) {
			throw new BusinessException("msg.aba.bico.bicoEscolhido.bomba.obrigatorio");
		}

		TypedQuery<Long> query = getEntityManager().createNamedQuery(Bico.QUERY_VERIFICA_NUM_BICO_UNIQUE, Long.class);
		query.setParameter("numBicoPosto", entidade.getNumBicoPosto());
		query.setParameter("idBico", entidade.getId() != null ? entidade.getId() : 0);
		query.setParameter("idPosto", entidade.getBomba().getPostoCombustivel().getId());
		Long count = query.getSingleResult();
		if (count > 0) {
			throw new BusinessException("msg.aba.bico.bicoEscolhido.numero.unico");
		}
		LOG.info("Finalizando validacao de bico.");
	}
	@Override
	public List<Bico> obterBicosDoPostoPorProdutoCombustivel(Long idPosto, Set<Long> tiposCombustiveis) {
		TypedQuery<Bico> createNamedQuery = getEntityManager().createNamedQuery(Bico.QUERY_BICOS_DO_POSTO_POR_PRODUTO_COMBUSTIVEL, Bico.class);
		createNamedQuery.setParameter("id", idPosto);
		createNamedQuery.setParameter("codsGurpoCombustivel", tiposCombustiveis);
		return createNamedQuery.getResultList();
	}
}
