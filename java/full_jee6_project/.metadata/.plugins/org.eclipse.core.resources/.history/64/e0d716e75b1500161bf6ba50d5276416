package br.com.devnagui.project.user;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.TypedQuery;

import junit.framework.Assert;

import org.junit.Before;
import org.junit.Test;
import org.mockito.stubbing.OngoingStubbing;

import br.com.devnagui.project.ejb.exception.BusinessException;
import br.com.devnagui.project.ejb.impl.UserBusinessEJB;
import br.com.devnagui.project.entities.User;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
public class UserBusinessEJBTest {

	private static final String USER_NAME = "Nathan";
	private static final String REGISTRATION_NUMBER = "12345678";
	private UserBusinessEJB userBusinessEJB;
	 
	@Before
	public void before(){
		userBusinessEJB = mock(UserBusinessEJB.class);
		when(userBusinessEJB.getEntityManager()).thenReturn(mock(EntityManager.class));
		when(userBusinessEJB.getEntityManager().createNamedQuery(anyString(), User.class)).thenReturn(mock(TypedQuery.class));
		when(userBusinessEJB).thenCallRealMethod();
	}
	
	@Test
	public void testGetRegistrationUserSucess() throws BusinessException {
		when(userBusinessEJB.getEntityManager().createNamedQuery(anyString(), User.class).getSingleResult()).thenReturn(new User(REGISTRATION_NUMBER, USER_NAME));

		User user = userBusinessEJB.getUserByRegistrationNumberAndName(REGISTRATION_NUMBER, USER_NAME);
	}
	
	@Test
	public void testValidateUserSucess() throws BusinessException {
		when(userBusinessEJB.getUserByRegistrationNumberAndName(REGISTRATION_NUMBER, USER_NAME)).thenReturn(new User(REGISTRATION_NUMBER, USER_NAME));
	
		userBusinessEJB.validateUser(new User(REGISTRATION_NUMBER, USER_NAME));
	}

	@Test
	public void testGetRegistrationUserErrorNotExisting() throws BusinessException  {
		
		EntityManager entityManagerMock = mock(EntityManager.class);
		TypedQuery<User> typedQueryMock = mock(TypedQuery.class);
		OngoingStubbing<EntityManager> thenReturn = when(userBusinessEJB.getEntityManager()).thenReturn(entityManagerMock);
		when(userBusinessEJB.getUserByRegistrationNumberAndName(REGISTRATION_NUMBER, USER_NAME)).thenCallRealMethod();
		when(entityManagerMock.createNamedQuery(User.QUERY_SEARCH_BY_NAME, User.class)).thenReturn(typedQueryMock);
		when(typedQueryMock.getSingleResult()).thenThrow(NoResultException.class);
		try {
			userBusinessEJB.getUserByRegistrationNumberAndName(REGISTRATION_NUMBER, USER_NAME);
			fail();
		} catch (BusinessException e) {
			assertEquals("mensagem.usuario.nao.existe", e.getMessage());
		}
		
	}
	

}
