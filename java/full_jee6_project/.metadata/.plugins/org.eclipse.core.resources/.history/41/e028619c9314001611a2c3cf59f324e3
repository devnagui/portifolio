package br.com.devnagui.project.webservices.consultanfe.adapter;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import br.com.devnagui.project.entities.ItemNFEEntrada;
import br.com.devnagui.project.entities.NFEEntrada;
import br.com.devnagui.project.enums.SituacaoNFE;
import br.com.devnagui.nfecorp.ws.consultas.nfe.Produto;
import br.com.devnagui.nfecorp.ws.consultas.nfe.RetNfe;

/**
 * Objeto utilizado como interface para acesso as informa��es da nota fiscal
 * segundo o modelo de dados do webservice da NFeCorp. Tamb�m funciona como um
 * decorator, adicionando caracteristicas para facilitar o controle visual e
 * l�gico para o neg�cio.
 * 
 * @author 006157C6
 * 
 */
public class NFEAdapter implements Serializable {

    /**
     * Serial UID.
     */
    private static final long serialVersionUID = 5186618152556026808L;

    public NFEAdapter(RetNfe nfeRetornada) {
        super();
        this.nfeRetornada = nfeRetornada;
        if (nfeRetornada != null && nfeRetornada.getProdutos() != null && nfeRetornada.getProdutos().size() > 0) {
            // Inicializa a lista
            List<Produto> itensDaNota = nfeRetornada.getProdutos();
            itensDaNotaFiscal = new ArrayList<ItemNFEAdapter>(itensDaNota.size());
            for (Produto itemAtual : itensDaNota) {
                itemAtual.setNfe(nfeRetornada.getNfe());
                itensDaNotaFiscal.add(new ItemNFEAdapter(itemAtual));
            }
            statusProcessamento = nfeRetornada.getNfe().getCodigoResultadoProcessamento();
            chaveNfe = nfeRetornada.getNfe().getChaveAcesso();
            razaoSocialEmitente = nfeRetornada.getNfe().getEmitente().getNome();
            CNPJEmitente = nfeRetornada.getNfe().getEmitente().getCnpj();
            CNPJDestinatario = nfeRetornada.getNfe().getDestinatario().getCnpj();
            dataEmissaoNFE = nfeRetornada.getNfe().getDataEmissao().toGregorianCalendar().getTime();

            Integer retorno = 0;

            if (itensDaNotaFiscal != null && itensDaNotaFiscal.size() > 0) {
                retorno = itensDaNotaFiscal.iterator().next().getCFOP();
            }
            CFOP = retorno;
        }
        // Falso pois a nota fiscal foi encontrada
        isNotaNaoInformada = false;
    }

    public NFEAdapter(NFEEntrada entrada) {
        super();
        chaveNfe = entrada.getCodAcesso();
        dataEmissaoNFE = entrada.getDataEmissao();
        for (ItemNFEEntrada itemNFEEntrada : entrada.getItensInformados()) {
            itensDaNotaFiscal.add(new ItemNFEAdapter(itemNFEEntrada));
        }
    }

    /**
     * Construtor usado quando a nota nao existe no project nem no NFeCorp.
     */
    public NFEAdapter(String chaveDeAcesso) {
        this.chaveNfe = chaveDeAcesso;
        isNotaNaoInformada = true;
    }

    private RetNfe nfeRetornada;

    private List<ItemNFEAdapter> itensDaNotaFiscal = new ArrayList<ItemNFEAdapter>();

    private SituacaoNFE situacao;

    private Integer statusProcessamento;
    private Integer CFOP;
    private String chaveNfe;
    private String razaoSocialEmitente;
    private Long CNPJEmitente;
    private Long CNPJDestinatario;
    private Date dataEmissaoNFE;
    private String style;

    /**
     * Campo que identifica se a nota nao existe no project nem no NFeCorp.
     */
    private boolean isNotaNaoInformada;

    public Integer getCFOP() {
        return CFOP;
    }

    public Integer getStatusProcessamentoNFE() {
        return statusProcessamento;
    }

    public String getChaveAcessoNFE() {
        return chaveNfe;
    }

    public String getRazaoSocialEmitente() {
        return razaoSocialEmitente;
    }

    public Long getCNPJEmitente() {
        return CNPJEmitente;

    }

    public Long getCNPJDestinatario() {
        return CNPJDestinatario;

    }

    public Date getDataEmissaoNFE() {
        return dataEmissaoNFE;
    }
    
    public void setDataEmissaoNFE(Date dataEmissaoNFE) {
        this.dataEmissaoNFE = dataEmissaoNFE;
    }

    public List<ItemNFEAdapter> getItensDaNotaFiscal() {
        return itensDaNotaFiscal;
    }

    public void setItensDaNotaFiscal(List<ItemNFEAdapter> itensDaNotaFiscal) {
        this.itensDaNotaFiscal = itensDaNotaFiscal;
    }

    public SituacaoNFE getSituacao() {
        return situacao;
    }

    public void setSituacao(SituacaoNFE situacao) {
        this.situacao = situacao;
    }

    public boolean getIsNotaNaoInformada() {
        return isNotaNaoInformada;
    }

    public void setIsNotaNaoInformada(boolean isNotaNaoInformada) {
        this.isNotaNaoInformada = isNotaNaoInformada;
    }

    /**
	 * @return the style
	 */
	public String getStyle() {
		return style;
	}

	/**
	 * @param style 
	 * 				the style to set
	 */
	public void setStyle(String style) {
		this.style = style;
	}

	@Override
    public String toString() {
        return "NFEAdapter [itensDaNotaFiscal=" + itensDaNotaFiscal + ", situacao=" + situacao + ", statusProcessamento=" + statusProcessamento + ", CFOP="
                + CFOP + ", chaveNfe=" + chaveNfe + ", razaoSocialEmitente=" + razaoSocialEmitente + ", CNPJEmitente=" + CNPJEmitente + ", CNPJDestinatario="
                + CNPJDestinatario + ", dataEmissaoNFE=" + dataEmissaoNFE + ", isNotaNaoInformada=" + isNotaNaoInformada + "]";
    }
}
