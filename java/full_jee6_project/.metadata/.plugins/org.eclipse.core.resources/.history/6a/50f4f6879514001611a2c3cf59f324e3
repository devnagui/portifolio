/**
 * Criado por 006157C6 em 16/04/2013
 */
package br.com.devnagui.project.manager.posto.manter;

import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import junit.framework.Assert;

import org.apache.log4j.Logger;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.unitils.UnitilsJUnit4TestClassRunner;
import org.unitils.dbunit.annotation.DataSet;
import org.unitils.inject.annotation.InjectIntoByType;
import org.unitils.inject.annotation.TestedObject;
import org.unitils.orm.jpa.annotation.JpaEntityManagerFactory;

import br.com.devnagui.project.entities.Bomba;
import br.com.devnagui.project.entities.LacreBomba;
import br.com.devnagui.project.entities.PostoCombustivel;
import br.com.devnagui.project.enums.TipoMedicaoBomba;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.manager.impl.BombaManagerBean;
import br.com.devnagui.project.manager.impl.PostoCombustivelManagerBean;

/**
 * Criado por @author 006157C6 em 16/04/2013
 * 
 */
@JpaEntityManagerFactory(configFile = "test-persistence.xml", persistenceUnit = "test-persistence-unit")
@RunWith(UnitilsJUnit4TestClassRunner.class)
public class BombaManagerBeanTest {

	// ATRIBUTOS E CONSTRUTORES

	/**
	 * 
	 */
	private static final long NUM_BOMBA_1 = 3L;
	/**
	 * 
	 */
	public static final long SEQ_BOMBA_1 = -3L;
	/**
	 * 
	 */
	public static final String INSERIR_BOMBA_XML = "inserirBomba.xml";
	/**
	 * 
	 */
	private static final String INSERIR_LACRE_BOMBA_XML = "inserirLacre.xml";

	private static final Logger LOG = Logger.getLogger(BombaManagerBeanTest.class);

	@TestedObject
	private BombaManagerBean bombasManagerBean;

	@TestedObject
	private PostoCombustivelManagerBean postoCombustivelManagerBean;

	@InjectIntoByType
	@PersistenceContext(unitName = "test-persistence-unit")
	private EntityManager entityManager;

	// METODOS PUBLICOS

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirNovaBombaSemLacreSucesso() {
		Bomba bombaNova = createBombaNovaValida();
		try {
			bombasManagerBean.insert(bombaNova);
			Assert.assertTrue(bombaNova.getId() != null);
		} catch (BusinessException e) {
			LOG.error("Erro ao inserir bomba sem lacre.", e);
			fail();
		}

	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirNovaBombaComLacreSucesso() {
		Bomba bombaNova = createBombaNovaValida();
		bombaNova.setLacres(new ArrayList<LacreBomba>());
		LacreBomba lacreBomba = new LacreBomba();
		lacreBomba.setNumLacreBomba("1");
		lacreBomba.setDataAplicacao(new Date());
		lacreBomba.setBomba(bombaNova);
		bombaNova.getLacres().add(lacreBomba);
		try {
			bombasManagerBean.insert(bombaNova);
			Assert.assertTrue(bombaNova.getId() != null);
			Assert.assertTrue(bombaNova.getLacres().size() == 1);
		} catch (BusinessException e) {
			LOG.error("Erro ao inserir bomba com lacre.", e);
			fail();
		}

	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_BOMBA_XML, INSERIR_LACRE_BOMBA_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testAlterarBombaCom2MaisLacresSucesso() {
		LacreBomba lacreBomba = new LacreBomba();
		lacreBomba.setDataAplicacao(new Date());
		lacreBomba.setNumLacreBomba("2");
		try {
			Bomba bomba = bombasManagerBean.buscar(SEQ_BOMBA_1);
			lacreBomba.setBomba(bomba);
			bomba.getLacres().add(lacreBomba);
			bombasManagerBean.update(bomba);
			Assert.assertTrue(bomba.getLacres().size() > 1);
		} catch (BusinessException e) {
			LOG.error("Erro ao inserir bomba com lacre.", e);
			fail();
		}
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_BOMBA_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirBombaNaoUnicaException() throws BusinessException {
		try {

			Bomba bombaNovaValida = createBombaNovaValida();
			bombaNovaValida.setNumBombaPosto(NUM_BOMBA_1);
			bombasManagerBean.insert(bombaNovaValida);
			fail();
		} catch (BusinessException e) {
			LOG.error("Erro esperado ao inserir bomba nao unica.", e);
			Assert.assertEquals("msg.aba.bomba.bombaEscolhida.numero.unico", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_BOMBA_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirBombaSemNumeroException() throws BusinessException {
		try {

			Bomba bombaNovaValida = createBombaNovaValida();
			bombaNovaValida.setNumBombaPosto(null);
			bombasManagerBean.insert(bombaNovaValida);
			fail();
		} catch (BusinessException e) {
			LOG.error("Erro esperado ao inserir bomba nao unica.", e);
			Assert.assertEquals("msg.aba.bomba.bombaEscolhida.numero.obrigatorio", e.getMessage());
			throw e;
		}
	}

	@Test(expected = BusinessException.class)
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_BOMBA_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testInserirBombaSemTipoMedicaoException() throws BusinessException {
		try {

			Bomba bombaNovaValida = createBombaNovaValida();
			bombaNovaValida.setTipoMedicaoBomba(null);
			bombasManagerBean.insert(bombaNovaValida);
			fail();
		} catch (BusinessException e) {
			LOG.error("Erro esperado ao inserir bomba sem medicao.", e);
			Assert.assertEquals("msg.aba.bomba.bombaEscolhida.tipoMedicao.obrigatorio", e.getMessage());
			throw e;
		}
	}

	@Test
	@DataSet(value = { PostoCombustivelManagerBeanTest.INSERIR_POSTO_XML, INSERIR_BOMBA_XML }, loadStrategy = br.com.devnagui.project.dbunitils.InsertOrUpdateWithCommitLoadStrategy.class)
	public void testObterBombasDoPostoSucesso() {
		List<Bomba> bombasDoPosto = bombasManagerBean.obterBombasDoPosto(-99L);
		Assert.assertTrue(bombasDoPosto != null && bombasDoPosto.size() >= 1);
	}

	// METODOS PRIVADOS

	/**
	 * Serve para...
	 * 
	 * @return
	 */
	private Bomba createBombaNovaValida() {
		PostoCombustivel posto = null;
		try {
			posto = postoCombustivelManagerBean.buscar(PostoCombustivelManagerBeanTest.SEQ_POSTO_1);
		} catch (BusinessException e) {
			LOG.error("Mensagem de erro gen�rica, deve ser substitu�da por 006157C6", e);
		}
		Long numTanqueNovo = 1L;
		if (!posto.getBombas().isEmpty()) {
			// mOCK DE UM NUMERO DE TANQUE QUE AINDA NAO EXISTA NA BASE
			numTanqueNovo = Collections.max(posto.getBombas()).getNumBombaPosto() + 1;
		}
		Bomba bomba = new Bomba();
		bomba.setPostoCombustivel(posto);
		bomba.setNomeFabricanteBomba("Bomba de teste");
		bomba.setNomeModeloBomba("Bomba de teste");
		bomba.setNumBombaPosto(numTanqueNovo);
		bomba.setNumSerieBomba("Bomba de teste");
		bomba.setObservacaoBomba("Bomba de teste");
		bomba.setTipoMedicaoBomba(TipoMedicaoBomba.DIGITAL);
		return bomba;
	}
	// GETS E SETS
}
