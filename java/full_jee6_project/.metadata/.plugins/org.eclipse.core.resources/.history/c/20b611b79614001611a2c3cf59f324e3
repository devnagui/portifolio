/**
 * 
 */
package br.com.devnagui.project.manager.strategy.visita;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.ejb.EJB;
import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.apache.log4j.Logger;

import br.com.devnagui.project.entities.MedicaoTanque;
import br.com.devnagui.project.entities.ProdutoCombustivel;
import br.com.devnagui.project.entities.Tanque;
import br.com.devnagui.project.entities.Visita;
import br.com.devnagui.project.enums.SituacaoVisita;
import br.com.devnagui.project.manager.TanqueManager;
import br.com.devnagui.project.manager.VisitaManager;
import br.com.devnagui.project.manager.exception.BusinessException;
import br.com.devnagui.project.vo.MedicaoTanqueVO;

/**
 * @author 006157C6
 *
 */
public class VisitaMedicaoTanqueStrategyImpl implements VisitaMedicaoStrategy<MedicaoTanqueVO> {
    private static final Logger LOG = Logger.getLogger(VisitaMedicaoTanqueStrategyImpl.class);
    
    @EJB
    private VisitaManager visitaManager;

    @EJB
    private TanqueManager tanqueManager;
    
    public VisitaMedicaoTanqueStrategyImpl(VisitaManager visitaManager2, TanqueManager tanqueManager2) {
        visitaManager=visitaManager2;
        tanqueManager= tanqueManager2;
    }
    
    public VisitaMedicaoTanqueStrategyImpl() {
    	//Construtor criado apenas para os testes.

	}

    @Override
    public List<MedicaoTanqueVO> montarMedicoesComInformacoesAnteriores(Visita visitaAtual, Set<Long> tiposCombustiveis) throws BusinessException {
        LOG.info("Iniciando busca por medicoes anteriores de tanques.");
        //Temos que pegar as medicoes anteriores para os tanques que possuem os combustiveis que estamos fiscalizando.
        List<MedicaoTanqueVO> listaMedicaoTanqueVO = carregarListaMedicaoTanqueVOcomValoresAnteriores(visitaAtual, tiposCombustiveis);
        preencherValoresMedicoesTanqueDaVisitaAtual(visitaAtual, listaMedicaoTanqueVO);
        LOG.info("Finalizando busca por medicoes anteriores de tanques.");

        return listaMedicaoTanqueVO;
    }

    @Override
    public void removerMedicoesPorCombustivel(List<ProdutoCombustivel> produtoCombustivelsFiscalizados,List<MedicaoTanqueVO> medicoesAtuais) throws BusinessException {
        LOG.info("Iniciando metodo para remover medicoes por combustiveis.");

        {
            LOG.info("Removendo medicoes dos tanques que nao estao associadas aos combustiveis fiscalizados.");
            Iterator<MedicaoTanqueVO> iterator = medicoesAtuais.iterator();
            while (iterator.hasNext()) {
                MedicaoTanqueVO medicaoTanqueVOAtual = iterator.next();
                if (!produtoCombustivelsFiscalizados.contains(medicaoTanqueVOAtual.getTanque().getProdutoCombustivel())) {
                    iterator.remove();
                }
            }
        }
    }

    @Override
    public Visita salvarMedicoesCombustiveis(Visita visitaAtual, List<MedicaoTanqueVO> medicoesAtuais) throws BusinessException {
        LOG.info("Iniciando o metodo de salvar medicoes de tanques.");
        validarMedicoesTanque(medicoesAtuais);
        visitaManager.inicializarObjetoOuColecao(visitaAtual);

        LOG.info("Existem " + medicoesAtuais.size() + " medicoes de tanques novos");
        if (visitaAtual.getId() != null) {
            limpaMedicoesTanquesAnteriores(visitaAtual.getId());
        }
        visitaAtual.setMedicoesTanque(new ArrayList<MedicaoTanque>());
        for (MedicaoTanqueVO medicaoTanqueVOAtual : medicoesAtuais) {
            MedicaoTanque medicaoTanque = criarMedicaoTanquePorVO(visitaAtual, medicaoTanqueVOAtual);
            visitaAtual.getMedicoesTanque().add(medicaoTanque);
        }

        visitaAtual.setSituacaoVisita(SituacaoVisita.ABERTA);
        try {
             visitaAtual = visitaManager.salvar(visitaAtual);
        } catch (BusinessException e) {
            LOG.error("Considerando que não existe visita anterior ao roteiro. ((Registrando erro apenas por precaucao))",e);
            throw e;
        }
        LOG.info("Finalizando o metodo de salvar medicoes de tanques.");
        return visitaAtual;
    }
    
    @Override
	public MedicaoTanqueVO buscarMedicaoAnterior(Long idTanque, Long idVisita) {
    	TypedQuery<MedicaoTanque> query = visitaManager.getEntityManager().createNamedQuery(MedicaoTanque.OBTER_MEDICOES_ANTERIORES_POR_TANQUE, MedicaoTanque.class);
    	query.setParameter("idTanque", idTanque);
    	query.setParameter("idVisitaAtual", idVisita==null?0:idVisita);
    	MedicaoTanqueVO medicaoTanqueVO = null;
    	if(query.getResultList().size() > 0) {
    		medicaoTanqueVO = new MedicaoTanqueVO();
    		medicaoTanqueVO.setMedicaoTanqueAnterior(query.getResultList().iterator().next());
    	}
		return medicaoTanqueVO;
	}
    

    private void preencherValoresMedicoesTanqueDaVisitaAtual(Visita visitaAtual, List<MedicaoTanqueVO> listaMedicaoTanqueVO) {
        LOG.info("Iniciando metodo para preencher valores das medicoes atuais dos tanques.");

        if(visitaAtual.getId()!=null){
            //Hashmap para buscar as medicoes da minha visita atual e montar o VO com os valores atuais(que estao salvos na base ou preenchidos na visita).
            visitaManager.inicializarObjetoOuColecao(visitaAtual);
            HashMap<Long, MedicaoTanque> hashMapMedicoesPorTanqueAtuais = new HashMap<Long, MedicaoTanque>();
            if(visitaAtual.getMedicoesTanque() != null) {
                for (MedicaoTanque medicaoTanqueNoFor : visitaAtual.getMedicoesTanque()) {
                    hashMapMedicoesPorTanqueAtuais.put(medicaoTanqueNoFor.getTanque().getId(), medicaoTanqueNoFor);
                }
                
                for(MedicaoTanqueVO medicaoTanqueVONoFor:listaMedicaoTanqueVO){
                    MedicaoTanque medicaoTanqueAtual = hashMapMedicoesPorTanqueAtuais.get(medicaoTanqueVONoFor.getTanque().getId());
                    if(medicaoTanqueAtual!=null){
                        medicaoTanqueVONoFor.setMedicaoTanqueAtual(medicaoTanqueAtual);
                    }
                }
            }
        }
        LOG.info("Iniciando metodo para preencher valores das medicoes atuais dos tanques.");

    }
    
    private List<MedicaoTanqueVO> carregarListaMedicaoTanqueVOcomValoresAnteriores(Visita visitaAtual, Set<Long> tiposCombustiveis) {
        LOG.info("Iniciando metodo para preencher valores das medicoes anteriores dos tanques.");
        
        List<Tanque> tanquesDoPosto = tanqueManager.obterTanquesPorDoPostoComTipoCombustiveis(visitaAtual.getPostoCombustivel().getId(), tiposCombustiveis);
        List<MedicaoTanqueVO> medicaoTanqueVOs = new ArrayList<MedicaoTanqueVO>(tanquesDoPosto.size());
        // Iterar sobre os tanques para montar o MedicaoTanqueVO.
        for (Tanque tanqueAtual : tanquesDoPosto) {
            MedicaoTanqueVO medicaoTanqueVOAtual = new MedicaoTanqueVO();
            medicaoTanqueVOAtual.setTanque(tanqueAtual);
            // Consultar medições anteriores por idTanque.
            TypedQuery<MedicaoTanque> queryUltimaMedicaoTanque = visitaManager.getEntityManager().createNamedQuery(MedicaoTanque.OBTER_MEDICOES_ANTERIORES_POR_TANQUE,
                    MedicaoTanque.class);
            queryUltimaMedicaoTanque.setParameter("idTanque", tanqueAtual.getId()!=null?tanqueAtual.getId():0);
            queryUltimaMedicaoTanque.setParameter("idVisitaAtual", visitaAtual.getId()==null?0:visitaAtual.getId());
            queryUltimaMedicaoTanque.setMaxResults(1);
            // Verificar se há medições anterioes.

            if (queryUltimaMedicaoTanque.getResultList().size() == 1) {
                LOG.info("Foi encontrado uma medicao anterior para o tanque,verificando se os dados ainda validos para consulta.");
                // Adicionar medição anterior à medicaoTanqueVO
                MedicaoTanque medicaoTanqueAnterior = queryUltimaMedicaoTanque.getResultList().iterator().next();
                Visita ultimaVisita4Tanque = medicaoTanqueAnterior.getVisita();

                if (visitaManager.isDadosVisitaAnteriorDisponivel(ultimaVisita4Tanque)) {
                    LOG.info("A medicao anterior ainda eh valida.");
                    medicaoTanqueVOAtual.setMedicaoTanqueAnterior(medicaoTanqueAnterior);
                }
            }
            medicaoTanqueVOs.add(medicaoTanqueVOAtual);
        }
        LOG.info("Finalizando metodo para preencher valores das medicoes anteriores dos tanques.");
        
        return medicaoTanqueVOs;
    }
    
    private void limpaMedicoesTanquesAnteriores(Long idVisita) {
        Query queryDelete=visitaManager.getEntityManager().createNamedQuery(MedicaoTanque.DELETAR_MEDICOES_TANQUES_POR_VISISTA);
        queryDelete.setParameter("idVisita", idVisita);
        queryDelete.executeUpdate();
    }
    
    private void validarMedicoesTanque(List<MedicaoTanqueVO> medicoesPorTanque) throws BusinessException {
        LOG.info("Iniciando o metodo de validacao da medicao de tanques.");

        if (medicoesPorTanque == null || medicoesPorTanque.isEmpty()) {
            throw new BusinessException("msg.visita.medicaoTanque.invalida");
        }

        for (MedicaoTanqueVO medicaoTanqueVOAtual : medicoesPorTanque) {
            if (medicaoTanqueVOAtual.getTanque() == null || medicaoTanqueVOAtual.getMedicaoTanqueAtual().getVolumeMedido() == null
                    || medicaoTanqueVOAtual.getMedicaoTanqueAtual().getVolumeMedido() == 0) {
                LOG.error("Medicao de Tanque  com problema: " + medicaoTanqueVOAtual);
                throw new BusinessException("msg.visita.medicaoTanque.invalida");
            }
        }
        LOG.info("Finalizando o metodo de validacao da medicao de tanques.");

    }
    
    private MedicaoTanque criarMedicaoTanquePorVO(Visita visita, MedicaoTanqueVO medicaoTanqueVOAtual) {
        MedicaoTanque medicaoTanque = new MedicaoTanque();
        if(medicaoTanqueVOAtual.getMedicaoTanqueAtual().getId() != null) {
            medicaoTanque = medicaoTanqueVOAtual.getMedicaoTanqueAtual();
        } else {
            medicaoTanque.setTanque(medicaoTanqueVOAtual.getTanque());
            medicaoTanque.setVisita(visita);
            medicaoTanque.setVolumeMedido(medicaoTanqueVOAtual.getMedicaoTanqueAtual().getVolumeMedido());
        }
        return medicaoTanque;
    }

}
