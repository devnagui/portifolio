package br.gov.ce.sefaz.project.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

@Entity
@Table(name = "POSTO_COMBUSTIVEL",schema="PROJECT")
@NamedQueries(value = {
        @NamedQuery(name = PostoCombustivel.QUERY_OBTER_POSTOS_COMBUSTIVEIS_DTO_ATIVO_POR_RAZAO_OU_CNPJ, query = "select new br.gov.ce.sefaz.project.dto.PostoCombustivelDTO(p.id, p.contribuinte.cnpj, p.contribuinte.razaoSocial) from PostoCombustivel p WHERE ( p.contribuinte.cnpjAsString like :cnpj or p.contribuinte.razaoSocial like :razaoSocial) and p.contribuinte.codCNAE = 4731800  and p.contribuinte.codSituacaoContribuinte in (1,8)"),
        @NamedQuery(name = PostoCombustivel.QUERY_BUSCA_POSTO_COMBUSTIVEL_ATIVO_POR_CNPJ, query = "select p from PostoCombustivel p WHERE p.contribuinte.cnpj = :cnpj and  p.contribuinte.codCNAE = 4731800 and p.contribuinte.codSituacaoContribuinte in (1,8) order by p.contribuinte.codSituacaoContribuinte"),
        @NamedQuery(name = PostoCombustivel.QUERY_BUSCA_POSTO_ATIVO_NA_SEFAZ_POR_CNPJ, query = "select p from PostoCombustivel p WHERE p.contribuinte.cnpj =:cnpj and p.contribuinte.codCNAE = 4731800  and p.contribuinte.codSituacaoContribuinte in (1,8) order by p.contribuinte.codSituacaoContribuinte"),
        @NamedQuery(name = PostoCombustivel.QUERY_BUSCA_POSTO_COMBUSTIVEL_FETCH_BOMBAS, query = "select p from PostoCombustivel p LEFT JOIN FETCH p.bombas WHERE p.id = :idPosto and  p.contribuinte.codCNAE = 4731800 ") })
public class PostoCombustivel implements Serializable {
    /**
     * Serial UID.
     */
    private static final long serialVersionUID = -1325892609414162082L;

    public static final String QUERY_BUSCA_POSTO_COMBUSTIVEL_ATIVO_POR_CNPJ = "buscaPostoCombustivelPorCNPJFetchTanques";
    public static final String QUERY_BUSCA_POSTO_COMBUSTIVEL_FETCH_BOMBAS = "buscaPostoCombustivelFetchBombas";
    public static final String QUERY_OBTER_POSTOS_COMBUSTIVEIS_DTO_ATIVO_POR_RAZAO_OU_CNPJ = "buscaPostoCombustivelDTOPorRazaoOuCNPJ";
    public static final String QUERY_BUSCA_POSTO_ATIVO_NA_SEFAZ_POR_CNPJ = "buscaPostoCombustivelAtivoPorCNPJ";

    // ATRIBUTOS E CONSTRUTORES

    @Id
    @Column(name = "SEQ_POSTO_COMBUSTIVEL")
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "SQ_POSTO_COMBUSTIVEL")
    @SequenceGenerator(name = "SQ_POSTO_COMBUSTIVEL", sequenceName = "SQ_POSTO_COMBUSTIVEL", allocationSize = 1, initialValue = 1)
    private Long id;

    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SEQ_BANDEIRA_POSTO")
    private BandeiraPosto bandeiraPosto;

    @ManyToMany(mappedBy = "postoCombustiveis", cascade = { CascadeType.PERSIST }, fetch = FetchType.LAZY)
    private List<RotaVersao> rotaVersaoPostos;

    @Column(name = "DAT_INICIO_VINCULO_BAND")
    @Temporal(TemporalType.DATE)
    private Date dataInicioVinculoBandeira;

    /**
     * Embora possa existir muitos contribuintes que compartilham o msm cnpj com
     * mudancas em seus outros atribuitos(como situacao), para um posto, devera
     * apenas existir um unico contribuinte, pois o sequencial deve ser
     * diferente. Exceto em casos dos testes, pois até o momento eh possivel
     * incluir dois postos com o mesmo contribuinte(sem unique). Será
     * contribuinte se CNAE = 4731800
     */
    @OneToOne(cascade={CascadeType.DETACH})
    @JoinColumn(name = "SEQ_CONTRIBUINTE")
    private Contribuinte contribuinte;

    @OneToMany(mappedBy = "postoCombustivel", cascade = { CascadeType.REFRESH, CascadeType.DETACH }, fetch = FetchType.LAZY)
    private List<Tanque> tanques;

    @OneToMany(mappedBy = "postoCombustivel", cascade = { CascadeType.REFRESH, CascadeType.DETACH }, fetch = FetchType.LAZY)
    private List<Bomba> bombas;

    /**
     * @return the id
     */
    public Long getId() {
        return id;
    }

    /**
     * @param id
     *            the id to set
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * @return the bandeiraPosto
     */
    public BandeiraPosto getBandeiraPosto() {
        return bandeiraPosto;
    }

    /**
     * @param bandeiraPosto
     *            the bandeiraPosto to set
     */
    public void setBandeiraPosto(BandeiraPosto bandeiraPosto) {
        this.bandeiraPosto = bandeiraPosto;
    }

    /**
     * @return the rotaVersaoPostos
     */
    public List<RotaVersao> getRotaVersaoPostos() {
        return rotaVersaoPostos;
    }

    /**
     * @param rotaVersaoPostos
     *            the rotaVersaoPostos to set
     */
    public void setRotaVersaoPostos(List<RotaVersao> rotaVersaoPostos) {
        this.rotaVersaoPostos = rotaVersaoPostos;
    }

    /**
     * @return the dataInicioVinculoBandeira
     */
    public Date getDataInicioVinculoBandeira() {
        return dataInicioVinculoBandeira;
    }

    /**
     * @param dataInicioVinculoBandeira
     *            the dataInicioVinculoBandeira to set
     */
    public void setDataInicioVinculoBandeira(Date dataInicioVinculoBandeira) {
        this.dataInicioVinculoBandeira = dataInicioVinculoBandeira;
    }

    /**
     * @return the tanques
     */
    public List<Tanque> getTanques() {
        Collections.sort(tanques);
        return tanques;
    }

    /**
     * @param tanques
     *            the tanques to set
     */
    public void setTanques(List<Tanque> tanques) {
        this.tanques = tanques;
    }

    /**
     * @return the bombas
     */
    public List<Bomba> getBombas() {
        return bombas;
    }

    /**
     * @param bombas
     *            the bombas to set
     */
    public void setBombas(List<Bomba> bombas) {
        this.bombas = bombas;
    }

    public Contribuinte getContribuinte() {
        return contribuinte;
    }

    public void setContribuinte(Contribuinte contribuinte) {
        this.contribuinte = contribuinte;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PostoCombustivel other = (PostoCombustivel) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        return true;
    }

//    @Override
//    public String toString() {
//        return "PostoCombustivel [id=" + id + ", bandeiraPosto=" + bandeiraPosto + ", rotaVersaoPostos=" + rotaVersaoPostos + ", dataInicioVinculoBandeira="
//                + dataInicioVinculoBandeira + ", contribuinte=" + contribuinte + ", tanques=" + tanques + ", bombas=" + bombas + "]";
//    }

}
